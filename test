#!/usr/bin/env python

import argparse
import yaml
import logging
from pathlib import Path
import os
import pickle
from tqdm import tqdm


from nanopelican.models import PelicanNano
from nanopelican.data import load_dataset
from nanopelican.models import load_model, load_history

from nanopelican.schedulers import LinearWarmupCosineAnnealing

from tqdm.keras import TqdmCallback
from keras.optimizers import AdamW, Adam
from keras.losses import CategoricalCrossentropy, BinaryCrossentropy
from keras.callbacks import CSVLogger

logger = logging.getLogger('')

def load_arguments():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("--dir", required=True,  type=str)
    parser.add_argument("--name", required=True,  type=str)

    args = parser.parse_args()
    return args

def load_yaml(filename):
    with open(filename, "r") as stream:
        config = yaml.load(stream, Loader=yaml.Loader)
    return config

def run_test(experiment):
    model = load_model(experiment / 'model.keras')
    config = load_yaml(experiment / 'config.yml')
    dataset = load_dataset(config['dataset'], keys=['test'])

    logger.setLevel(logging.DEBUG)
    logfile = logging.FileHandler(experiment / 'test.log')
    logging.basicConfig(level=logging.DEBUG, handlers=[logfile])

    loss, acc = model.evaluate(dataset.test.batch(128))
    logger.info(f'loss: {loss} accc: {acc}')

def main():
    args = load_arguments()

    # root = Path.cwd()
    found = False
    for elem in Path.cwd().iterdir():
        if elem.is_dir() and args.dir in elem.name:
            root = elem
            found = True
            break
    if not found:
        raise FileNotFoundError(f"Cannot find directory {args.dir}")


    experiments = []
    for file in root.iterdir():
        if file.is_dir() and args.name in file.name:
            experiments.append(file)

    print(f'Found {len(experiments)} tests')

    for exp in tqdm(experiments):
        try:
            run_test(exp)
        except KeyboardInterrupt:
            break
        except:
            continue

if __name__ == '__main__':
    main()

