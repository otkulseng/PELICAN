2024-06-18 13:00:29.013098: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-06-18 13:00:29.015180: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 13:00:29.072265: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 13:00:29.373421: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-06-18 13:00:31.101529: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-06-18 13:00:38.711698: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:282] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
Running train
Model: "functional_1"
┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓
┃ Layer (type)        ┃ Output Shape      ┃    Param # ┃ Connected to      ┃
┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩
│ input_layer         │ (None, 8, 4)      │          0 │ -                 │
│ (InputLayer)        │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ inner_product       │ [(None, 8, 8, 1), │          0 │ input_layer[0][0] │
│ (InnerProduct)      │ (None, 8, 8, 1)]  │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalization │ (None, 8, 8, 1)   │          4 │ inner_product[0]… │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v2 (Lineq2v2) │ (None, 8, 8, 6)   │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ diag_bias_dense     │ (None, 8, 8, 2)   │         16 │ lineq2v2[0][0]    │
│ (DiagBiasDense)     │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ multiply (Multiply) │ (None, 8, 8, 2)   │          0 │ diag_bias_dense[… │
│                     │                   │            │ inner_product[0]… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalizatio… │ (None, 8, 8, 2)   │          8 │ multiply[0][0]    │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v0 (Lineq2v0) │ (None, 4)         │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense (Dense)       │ (None, 5)         │         25 │ lineq2v0[0][0]    │
└─────────────────────┴───────────────────┴────────────┴───────────────────┘
 Total params: 53 (212.00 B)
 Trainable params: 47 (188.00 B)
 Non-trainable params: 6 (24.00 B)
0epoch [00:00, ?epoch/s]  0%|          | 0/1000 [00:00<?, ?epoch/s]/cluster/home/okulseng/.local/lib64/python3.11/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:120: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
  self._warn_if_super_not_called()
  0%|          | 1/1000 [00:17<4:46:37, 17.21s/epoch, accuracy=0.363, loss=1.48, lr=0.002, val_accuracy=0.386, val_loss=1.44, val_lr=0.002]  0%|          | 2/1000 [00:32<4:28:37, 16.15s/epoch, accuracy=0.387, loss=1.44, lr=0.002, val_accuracy=0.386, val_loss=1.44, val_lr=0.002]  0%|          | 3/1000 [00:48<4:22:31, 15.80s/epoch, accuracy=0.387, loss=1.43, lr=0.002, val_accuracy=0.383, val_loss=1.44, val_lr=0.002]  0%|          | 4/1000 [01:03<4:19:26, 15.63s/epoch, accuracy=0.389, loss=1.43, lr=0.002, val_accuracy=0.386, val_loss=1.42, val_lr=0.002]  0%|          | 5/1000 [01:18<4:18:15, 15.57s/epoch, accuracy=0.396, loss=1.41, lr=0.002, val_accuracy=0.396, val_loss=1.4, val_lr=0.002]   1%|          | 6/1000 [01:34<4:17:11, 15.52s/epoch, accuracy=0.401, loss=1.38, lr=0.002, val_accuracy=0.402, val_loss=1.37, val_lr=0.002]  1%|          | 7/1000 [01:49<4:16:16, 15.48s/epoch, accuracy=0.405, loss=1.35, lr=0.002, val_accuracy=0.405, val_loss=1.34, val_lr=0.002]  1%|          | 8/1000 [02:05<4:15:39, 15.46s/epoch, accuracy=0.408, loss=1.34, lr=0.002, val_accuracy=0.406, val_loss=1.33, val_lr=0.002]  1%|          | 9/1000 [02:20<4:14:54, 15.43s/epoch, accuracy=0.41, loss=1.33, lr=0.002, val_accuracy=0.408, val_loss=1.33, val_lr=0.002]   1%|          | 10/1000 [02:35<4:14:33, 15.43s/epoch, accuracy=0.411, loss=1.33, lr=0.002, val_accuracy=0.408, val_loss=1.33, val_lr=0.002]  1%|          | 11/1000 [02:51<4:14:10, 15.42s/epoch, accuracy=0.412, loss=1.33, lr=0.002, val_accuracy=0.408, val_loss=1.33, val_lr=0.002]  1%|          | 12/1000 [03:06<4:14:04, 15.43s/epoch, accuracy=0.412, loss=1.33, lr=0.002, val_accuracy=0.41, val_loss=1.33, val_lr=0.002]   1%|▏         | 13/1000 [03:22<4:13:58, 15.44s/epoch, accuracy=0.413, loss=1.33, lr=0.002, val_accuracy=0.411, val_loss=1.32, val_lr=0.002]  1%|▏         | 14/1000 [03:37<4:13:51, 15.45s/epoch, accuracy=0.413, loss=1.33, lr=0.002, val_accuracy=0.41, val_loss=1.33, val_lr=0.002]   2%|▏         | 15/1000 [03:52<4:12:57, 15.41s/epoch, accuracy=0.413, loss=1.32, lr=0.002, val_accuracy=0.408, val_loss=1.33, val_lr=0.002]  2%|▏         | 16/1000 [04:08<4:12:56, 15.42s/epoch, accuracy=0.413, loss=1.32, lr=0.002, val_accuracy=0.412, val_loss=1.32, val_lr=0.002]  2%|▏         | 17/1000 [04:23<4:12:47, 15.43s/epoch, accuracy=0.413, loss=1.32, lr=0.002, val_accuracy=0.411, val_loss=1.32, val_lr=0.002]  2%|▏         | 18/1000 [04:39<4:12:25, 15.42s/epoch, accuracy=0.413, loss=1.32, lr=0.002, val_accuracy=0.41, val_loss=1.32, val_lr=0.002]   2%|▏         | 19/1000 [04:54<4:11:51, 15.40s/epoch, accuracy=0.413, loss=1.32, lr=0.002, val_accuracy=0.41, val_loss=1.32, val_lr=0.002]  2%|▏         | 20/1000 [05:10<4:11:26, 15.39s/epoch, accuracy=0.413, loss=1.32, lr=0.002, val_accuracy=0.411, val_loss=1.32, val_lr=0.002]  2%|▏         | 21/1000 [05:25<4:11:02, 15.39s/epoch, accuracy=0.413, loss=1.32, lr=0.002, val_accuracy=0.411, val_loss=1.32, val_lr=0.002]  2%|▏         | 22/1000 [05:40<4:11:01, 15.40s/epoch, accuracy=0.413, loss=1.32, lr=0.002, val_accuracy=0.412, val_loss=1.32, val_lr=0.002]  2%|▏         | 23/1000 [05:56<4:10:19, 15.37s/epoch, accuracy=0.413, loss=1.32, lr=0.002, val_accuracy=0.412, val_loss=1.32, val_lr=0.002]  2%|▏         | 24/1000 [06:11<4:10:04, 15.37s/epoch, accuracy=0.413, loss=1.32, lr=0.002, val_accuracy=0.41, val_loss=1.32, val_lr=0.002]   2%|▎         | 25/1000 [06:26<4:10:05, 15.39s/epoch, accuracy=0.413, loss=1.32, lr=0.002, val_accuracy=0.411, val_loss=1.32, val_lr=0.002]  3%|▎         | 26/1000 [06:42<4:09:37, 15.38s/epoch, accuracy=0.413, loss=1.32, lr=0.002, val_accuracy=0.41, val_loss=1.32, val_lr=0.002]   3%|▎         | 27/1000 [06:57<4:09:11, 15.37s/epoch, accuracy=0.414, loss=1.32, lr=0.0002, val_accuracy=0.411, val_loss=1.32, val_lr=0.0002]  3%|▎         | 28/1000 [07:12<4:08:56, 15.37s/epoch, accuracy=0.414, loss=1.32, lr=0.0002, val_accuracy=0.41, val_loss=1.32, val_lr=0.0002]   3%|▎         | 29/1000 [07:28<4:08:42, 15.37s/epoch, accuracy=0.414, loss=1.32, lr=0.0002, val_accuracy=0.411, val_loss=1.32, val_lr=0.0002]  3%|▎         | 30/1000 [07:43<4:08:23, 15.36s/epoch, accuracy=0.414, loss=1.32, lr=0.0002, val_accuracy=0.411, val_loss=1.32, val_lr=0.0002]  3%|▎         | 31/1000 [07:59<4:07:57, 15.35s/epoch, accuracy=0.414, loss=1.32, lr=0.0002, val_accuracy=0.411, val_loss=1.32, val_lr=0.0002]  3%|▎         | 32/1000 [08:14<4:07:55, 15.37s/epoch, accuracy=0.414, loss=1.32, lr=0.0002, val_accuracy=0.411, val_loss=1.32, val_lr=0.0002]  3%|▎         | 33/1000 [08:29<4:07:16, 15.34s/epoch, accuracy=0.414, loss=1.32, lr=0.0002, val_accuracy=0.411, val_loss=1.32, val_lr=0.0002]  3%|▎         | 34/1000 [08:45<4:07:07, 15.35s/epoch, accuracy=0.414, loss=1.32, lr=0.0002, val_accuracy=0.411, val_loss=1.32, val_lr=0.0002]  4%|▎         | 35/1000 [09:00<4:06:14, 15.31s/epoch, accuracy=0.414, loss=1.32, lr=0.0002, val_accuracy=0.41, val_loss=1.32, val_lr=0.0002]   4%|▎         | 36/1000 [09:15<4:06:24, 15.34s/epoch, accuracy=0.414, loss=1.32, lr=0.0002, val_accuracy=0.411, val_loss=1.32, val_lr=0.0002]  4%|▎         | 36/1000 [09:15<4:08:00, 15.44s/epoch, accuracy=0.414, loss=1.32, lr=0.0002, val_accuracy=0.411, val_loss=1.32, val_lr=0.0002]
