2024-06-18 12:46:26.929497: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-06-18 12:46:26.929793: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 12:46:26.933167: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 12:46:26.967657: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-06-18 12:46:28.717446: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-06-18 12:46:37.996466: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:282] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
Running train
Model: "functional_1"
┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓
┃ Layer (type)        ┃ Output Shape      ┃    Param # ┃ Connected to      ┃
┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩
│ input_layer         │ (None, 8, 4)      │          0 │ -                 │
│ (InputLayer)        │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ inner_product       │ [(None, 8, 8, 1), │          0 │ input_layer[0][0] │
│ (InnerProduct)      │ (None, 8, 8, 1)]  │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalization │ (None, 8, 8, 1)   │          4 │ inner_product[0]… │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v2 (Lineq2v2) │ (None, 8, 8, 6)   │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ diag_bias_dense     │ (None, 8, 8, 8)   │         64 │ lineq2v2[0][0]    │
│ (DiagBiasDense)     │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ multiply (Multiply) │ (None, 8, 8, 8)   │          0 │ diag_bias_dense[… │
│                     │                   │            │ inner_product[0]… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalizatio… │ (None, 8, 8, 8)   │         32 │ multiply[0][0]    │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v0 (Lineq2v0) │ (None, 16)        │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense (Dense)       │ (None, 5)         │         85 │ lineq2v0[0][0]    │
└─────────────────────┴───────────────────┴────────────┴───────────────────┘
 Total params: 185 (740.00 B)
 Trainable params: 167 (668.00 B)
 Non-trainable params: 18 (72.00 B)
0epoch [00:00, ?epoch/s]  0%|          | 0/1000 [00:00<?, ?epoch/s]/cluster/home/okulseng/.local/lib64/python3.11/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:120: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
  self._warn_if_super_not_called()
  0%|          | 1/1000 [00:23<6:27:15, 23.26s/epoch, accuracy=0.378, loss=1.45, lr=0.002, val_accuracy=0.39, val_loss=1.42, val_lr=0.002]  0%|          | 2/1000 [00:44<6:04:41, 21.93s/epoch, accuracy=0.402, loss=1.39, lr=0.002, val_accuracy=0.407, val_loss=1.36, val_lr=0.002]  0%|          | 3/1000 [01:05<5:57:36, 21.52s/epoch, accuracy=0.412, loss=1.34, lr=0.002, val_accuracy=0.413, val_loss=1.33, val_lr=0.002]  0%|          | 4/1000 [01:26<5:52:01, 21.21s/epoch, accuracy=0.42, loss=1.32, lr=0.002, val_accuracy=0.423, val_loss=1.31, val_lr=0.002]   0%|          | 5/1000 [01:46<5:50:10, 21.12s/epoch, accuracy=0.43, loss=1.3, lr=0.002, val_accuracy=0.433, val_loss=1.3, val_lr=0.002]    1%|          | 6/1000 [02:07<5:48:27, 21.03s/epoch, accuracy=0.445, loss=1.28, lr=0.002, val_accuracy=0.448, val_loss=1.28, val_lr=0.002]  1%|          | 7/1000 [02:28<5:47:16, 20.98s/epoch, accuracy=0.452, loss=1.28, lr=0.002, val_accuracy=0.452, val_loss=1.27, val_lr=0.002]  1%|          | 8/1000 [02:49<5:46:30, 20.96s/epoch, accuracy=0.456, loss=1.27, lr=0.002, val_accuracy=0.455, val_loss=1.27, val_lr=0.002]  1%|          | 9/1000 [03:10<5:45:34, 20.92s/epoch, accuracy=0.459, loss=1.27, lr=0.002, val_accuracy=0.423, val_loss=1.27, val_lr=0.002]  1%|          | 10/1000 [03:31<5:44:53, 20.90s/epoch, accuracy=0.46, loss=1.26, lr=0.002, val_accuracy=0.456, val_loss=1.26, val_lr=0.002]  1%|          | 11/1000 [03:52<5:43:52, 20.86s/epoch, accuracy=0.461, loss=1.26, lr=0.002, val_accuracy=0.461, val_loss=1.26, val_lr=0.002]  1%|          | 12/1000 [04:12<5:43:13, 20.84s/epoch, accuracy=0.462, loss=1.26, lr=0.002, val_accuracy=0.464, val_loss=1.26, val_lr=0.002]  1%|▏         | 13/1000 [04:33<5:43:28, 20.88s/epoch, accuracy=0.463, loss=1.26, lr=0.002, val_accuracy=0.445, val_loss=1.27, val_lr=0.002]  1%|▏         | 14/1000 [04:54<5:41:33, 20.78s/epoch, accuracy=0.463, loss=1.26, lr=0.002, val_accuracy=0.462, val_loss=1.26, val_lr=0.002]  2%|▏         | 15/1000 [05:15<5:41:51, 20.82s/epoch, accuracy=0.463, loss=1.26, lr=0.002, val_accuracy=0.459, val_loss=1.26, val_lr=0.002]  2%|▏         | 16/1000 [05:36<5:42:28, 20.88s/epoch, accuracy=0.464, loss=1.26, lr=0.002, val_accuracy=0.466, val_loss=1.26, val_lr=0.002]  2%|▏         | 17/1000 [05:57<5:42:08, 20.88s/epoch, accuracy=0.464, loss=1.26, lr=0.002, val_accuracy=0.462, val_loss=1.26, val_lr=0.002]  2%|▏         | 18/1000 [06:18<5:41:38, 20.87s/epoch, accuracy=0.464, loss=1.26, lr=0.002, val_accuracy=0.459, val_loss=1.26, val_lr=0.002]  2%|▏         | 19/1000 [06:38<5:39:15, 20.75s/epoch, accuracy=0.464, loss=1.26, lr=0.002, val_accuracy=0.463, val_loss=1.26, val_lr=0.002]  2%|▏         | 20/1000 [06:59<5:39:37, 20.79s/epoch, accuracy=0.465, loss=1.25, lr=0.002, val_accuracy=0.45, val_loss=1.26, val_lr=0.002]   2%|▏         | 21/1000 [07:20<5:39:15, 20.79s/epoch, accuracy=0.465, loss=1.25, lr=0.002, val_accuracy=0.462, val_loss=1.26, val_lr=0.002]  2%|▏         | 22/1000 [07:41<5:39:28, 20.83s/epoch, accuracy=0.465, loss=1.25, lr=0.002, val_accuracy=0.459, val_loss=1.26, val_lr=0.002]  2%|▏         | 23/1000 [08:02<5:39:36, 20.86s/epoch, accuracy=0.464, loss=1.25, lr=0.002, val_accuracy=0.427, val_loss=1.27, val_lr=0.002]  2%|▏         | 24/1000 [08:22<5:38:57, 20.84s/epoch, accuracy=0.465, loss=1.25, lr=0.002, val_accuracy=0.462, val_loss=1.25, val_lr=0.002]  2%|▎         | 25/1000 [08:43<5:37:17, 20.76s/epoch, accuracy=0.465, loss=1.25, lr=0.002, val_accuracy=0.465, val_loss=1.26, val_lr=0.002]  3%|▎         | 26/1000 [09:04<5:37:22, 20.78s/epoch, accuracy=0.465, loss=1.25, lr=0.002, val_accuracy=0.465, val_loss=1.25, val_lr=0.002]  3%|▎         | 27/1000 [09:25<5:37:00, 20.78s/epoch, accuracy=0.465, loss=1.25, lr=0.0002, val_accuracy=0.464, val_loss=1.25, val_lr=0.0002]  3%|▎         | 28/1000 [09:45<5:36:42, 20.78s/epoch, accuracy=0.465, loss=1.25, lr=0.0002, val_accuracy=0.464, val_loss=1.25, val_lr=0.0002]  3%|▎         | 29/1000 [10:06<5:36:47, 20.81s/epoch, accuracy=0.465, loss=1.25, lr=0.0002, val_accuracy=0.463, val_loss=1.25, val_lr=0.0002]  3%|▎         | 30/1000 [10:27<5:36:33, 20.82s/epoch, accuracy=0.465, loss=1.25, lr=0.0002, val_accuracy=0.463, val_loss=1.25, val_lr=0.0002]  3%|▎         | 31/1000 [10:48<5:36:07, 20.81s/epoch, accuracy=0.465, loss=1.25, lr=0.0002, val_accuracy=0.457, val_loss=1.26, val_lr=0.0002]  3%|▎         | 32/1000 [11:09<5:36:03, 20.83s/epoch, accuracy=0.465, loss=1.25, lr=0.0002, val_accuracy=0.457, val_loss=1.26, val_lr=0.0002]  3%|▎         | 33/1000 [11:29<5:35:01, 20.79s/epoch, accuracy=0.466, loss=1.25, lr=0.0002, val_accuracy=0.462, val_loss=1.26, val_lr=0.0002]  3%|▎         | 34/1000 [11:50<5:34:13, 20.76s/epoch, accuracy=0.465, loss=1.25, lr=0.0002, val_accuracy=0.463, val_loss=1.25, val_lr=0.0002]  4%|▎         | 35/1000 [12:11<5:34:11, 20.78s/epoch, accuracy=0.465, loss=1.25, lr=0.0002, val_accuracy=0.463, val_loss=1.25, val_lr=0.0002]  4%|▎         | 36/1000 [12:32<5:34:21, 20.81s/epoch, accuracy=0.465, loss=1.25, lr=0.0002, val_accuracy=0.462, val_loss=1.25, val_lr=0.0002]  4%|▎         | 36/1000 [12:32<5:35:45, 20.90s/epoch, accuracy=0.465, loss=1.25, lr=0.0002, val_accuracy=0.462, val_loss=1.25, val_lr=0.0002]
