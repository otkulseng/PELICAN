2024-06-18 11:20:31.949640: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 11:20:32.001312: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 11:20:32.223643: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-06-18 11:20:34.343779: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-06-18 11:20:43.750159: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:282] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
Running train
Model: "functional_1"
┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓
┃ Layer (type)        ┃ Output Shape      ┃    Param # ┃ Connected to      ┃
┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩
│ input_layer         │ (None, 32, 4)     │          0 │ -                 │
│ (InputLayer)        │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ inner_product       │ [(None, 32, 32,   │          0 │ input_layer[0][0] │
│ (InnerProduct)      │ 1), (None, 32,    │            │                   │
│                     │ 32, 1)]           │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalization │ (None, 32, 32, 1) │          4 │ inner_product[0]… │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v2 (Lineq2v2) │ (None, 32, 32, 6) │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ diag_bias_dense     │ (None, 32, 32, 8) │         64 │ lineq2v2[0][0]    │
│ (DiagBiasDense)     │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ multiply (Multiply) │ (None, 32, 32, 8) │          0 │ diag_bias_dense[… │
│                     │                   │            │ inner_product[0]… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalizatio… │ (None, 32, 32, 8) │         32 │ multiply[0][0]    │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v0 (Lineq2v0) │ (None, 16)        │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense (Dense)       │ (None, 5)         │         85 │ lineq2v0[0][0]    │
└─────────────────────┴───────────────────┴────────────┴───────────────────┘
 Total params: 185 (740.00 B)
 Trainable params: 167 (668.00 B)
 Non-trainable params: 18 (72.00 B)
0epoch [00:00, ?epoch/s]  0%|          | 0/1000 [00:00<?, ?epoch/s]/cluster/home/okulseng/.local/lib64/python3.11/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:120: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
  self._warn_if_super_not_called()
  0%|          | 1/1000 [04:45<79:17:17, 285.72s/epoch, accuracy=0.602, loss=1.09, lr=0.002, val_accuracy=0.655, val_loss=0.985, val_lr=0.002]  0%|          | 2/1000 [09:24<78:01:56, 281.48s/epoch, accuracy=0.65, loss=0.978, lr=0.002, val_accuracy=0.66, val_loss=0.968, val_lr=0.002]   0%|          | 3/1000 [14:12<78:49:03, 284.60s/epoch, accuracy=0.653, loss=0.966, lr=0.002, val_accuracy=0.653, val_loss=0.967, val_lr=0.002]  0%|          | 4/1000 [18:55<78:33:52, 283.97s/epoch, accuracy=0.656, loss=0.956, lr=0.002, val_accuracy=0.663, val_loss=0.945, val_lr=0.002]  0%|          | 5/1000 [23:49<79:29:08, 287.59s/epoch, accuracy=0.658, loss=0.947, lr=0.002, val_accuracy=0.664, val_loss=0.939, val_lr=0.002]  1%|          | 6/1000 [28:37<79:28:06, 287.81s/epoch, accuracy=0.658, loss=0.941, lr=0.002, val_accuracy=0.664, val_loss=0.928, val_lr=0.002]  1%|          | 7/1000 [33:27<79:31:50, 288.33s/epoch, accuracy=0.659, loss=0.935, lr=0.002, val_accuracy=0.663, val_loss=0.925, val_lr=0.002]  1%|          | 8/1000 [38:23<80:11:00, 290.99s/epoch, accuracy=0.66, loss=0.932, lr=0.002, val_accuracy=0.669, val_loss=0.92, val_lr=0.002]    1%|          | 9/1000 [43:15<80:10:50, 291.27s/epoch, accuracy=0.66, loss=0.928, lr=0.002, val_accuracy=0.668, val_loss=0.92, val_lr=0.002]  1%|          | 10/1000 [48:04<79:52:50, 290.48s/epoch, accuracy=0.661, loss=0.925, lr=0.002, val_accuracy=0.638, val_loss=0.941, val_lr=0.002]  1%|          | 11/1000 [52:47<79:12:49, 288.34s/epoch, accuracy=0.662, loss=0.922, lr=0.002, val_accuracy=0.671, val_loss=0.909, val_lr=0.002]  1%|          | 12/1000 [57:35<79:05:42, 288.20s/epoch, accuracy=0.663, loss=0.919, lr=0.002, val_accuracy=0.659, val_loss=0.918, val_lr=0.002]  1%|▏         | 13/1000 [1:02:26<79:11:14, 288.83s/epoch, accuracy=0.664, loss=0.916, lr=0.002, val_accuracy=0.667, val_loss=0.909, val_lr=0.002]  1%|▏         | 14/1000 [1:07:19<79:28:47, 290.19s/epoch, accuracy=0.664, loss=0.914, lr=0.002, val_accuracy=0.671, val_loss=0.904, val_lr=0.002]  2%|▏         | 15/1000 [1:12:15<79:52:42, 291.94s/epoch, accuracy=0.665, loss=0.913, lr=0.002, val_accuracy=0.667, val_loss=0.906, val_lr=0.002]  2%|▏         | 16/1000 [1:16:57<78:57:54, 288.90s/epoch, accuracy=0.666, loss=0.912, lr=0.002, val_accuracy=0.668, val_loss=0.91, val_lr=0.002]   2%|▏         | 17/1000 [1:21:53<79:27:02, 290.97s/epoch, accuracy=0.667, loss=0.911, lr=0.002, val_accuracy=0.674, val_loss=0.897, val_lr=0.002]  2%|▏         | 18/1000 [1:26:45<79:30:06, 291.45s/epoch, accuracy=0.667, loss=0.909, lr=0.002, val_accuracy=0.67, val_loss=0.9, val_lr=0.002]     2%|▏         | 19/1000 [1:31:31<78:57:38, 289.76s/epoch, accuracy=0.668, loss=0.909, lr=0.002, val_accuracy=0.659, val_loss=0.929, val_lr=0.002]  2%|▏         | 20/1000 [1:36:20<78:50:06, 289.60s/epoch, accuracy=0.669, loss=0.907, lr=0.002, val_accuracy=0.676, val_loss=0.897, val_lr=0.002]  2%|▏         | 21/1000 [1:41:14<79:07:24, 290.95s/epoch, accuracy=0.669, loss=0.906, lr=0.002, val_accuracy=0.67, val_loss=0.897, val_lr=0.002]   2%|▏         | 22/1000 [1:46:05<79:01:46, 290.91s/epoch, accuracy=0.67, loss=0.905, lr=0.002, val_accuracy=0.665, val_loss=0.909, val_lr=0.002]  2%|▏         | 23/1000 [1:50:46<78:10:09, 288.03s/epoch, accuracy=0.67, loss=0.904, lr=0.002, val_accuracy=0.677, val_loss=0.891, val_lr=0.002]  2%|▏         | 24/1000 [1:55:39<78:29:52, 289.54s/epoch, accuracy=0.67, loss=0.903, lr=0.002, val_accuracy=0.666, val_loss=0.916, val_lr=0.002]  2%|▎         | 25/1000 [2:00:26<78:08:43, 288.54s/epoch, accuracy=0.671, loss=0.903, lr=0.002, val_accuracy=0.673, val_loss=0.895, val_lr=0.002]  3%|▎         | 26/1000 [2:05:15<78:06:35, 288.70s/epoch, accuracy=0.671, loss=0.902, lr=0.002, val_accuracy=0.672, val_loss=0.893, val_lr=0.002]  3%|▎         | 27/1000 [2:09:55<77:19:12, 286.08s/epoch, accuracy=0.671, loss=0.902, lr=0.002, val_accuracy=0.67, val_loss=0.899, val_lr=0.002]   3%|▎         | 28/1000 [2:14:44<77:28:06, 286.92s/epoch, accuracy=0.671, loss=0.901, lr=0.002, val_accuracy=0.677, val_loss=0.891, val_lr=0.002]  3%|▎         | 29/1000 [2:19:35<77:42:55, 288.13s/epoch, accuracy=0.672, loss=0.9, lr=0.002, val_accuracy=0.668, val_loss=0.904, val_lr=0.002]    3%|▎         | 30/1000 [2:24:19<77:19:21, 286.97s/epoch, accuracy=0.671, loss=0.9, lr=0.002, val_accuracy=0.655, val_loss=0.939, val_lr=0.002]  3%|▎         | 31/1000 [2:29:02<76:53:56, 285.69s/epoch, accuracy=0.672, loss=0.9, lr=0.002, val_accuracy=0.68, val_loss=0.888, val_lr=0.002]   3%|▎         | 32/1000 [2:33:53<77:18:10, 287.49s/epoch, accuracy=0.672, loss=0.9, lr=0.002, val_accuracy=0.673, val_loss=0.898, val_lr=0.002]  3%|▎         | 33/1000 [2:38:40<77:08:05, 287.16s/epoch, accuracy=0.672, loss=0.899, lr=0.002, val_accuracy=0.677, val_loss=0.888, val_lr=0.002]  3%|▎         | 34/1000 [2:43:35<77:42:33, 289.60s/epoch, accuracy=0.672, loss=0.899, lr=0.002, val_accuracy=0.673, val_loss=0.892, val_lr=0.002]  4%|▎         | 35/1000 [2:48:26<77:42:31, 289.90s/epoch, accuracy=0.672, loss=0.899, lr=0.002, val_accuracy=0.679, val_loss=0.887, val_lr=0.002]  4%|▎         | 36/1000 [2:53:10<77:11:21, 288.26s/epoch, accuracy=0.672, loss=0.898, lr=0.002, val_accuracy=0.679, val_loss=0.885, val_lr=0.002]  4%|▎         | 37/1000 [2:57:55<76:52:01, 287.35s/epoch, accuracy=0.673, loss=0.898, lr=0.002, val_accuracy=0.673, val_loss=0.892, val_lr=0.002]  4%|▍         | 38/1000 [3:02:37<76:19:31, 285.63s/epoch, accuracy=0.672, loss=0.898, lr=0.002, val_accuracy=0.679, val_loss=0.886, val_lr=0.002]  4%|▍         | 39/1000 [3:07:30<76:53:33, 288.05s/epoch, accuracy=0.673, loss=0.897, lr=0.002, val_accuracy=0.678, val_loss=0.886, val_lr=0.002]  4%|▍         | 40/1000 [3:12:16<76:37:22, 287.34s/epoch, accuracy=0.673, loss=0.897, lr=0.002, val_accuracy=0.675, val_loss=0.888, val_lr=0.002]  4%|▍         | 41/1000 [3:17:01<76:19:27, 286.51s/epoch, accuracy=0.672, loss=0.898, lr=0.002, val_accuracy=0.676, val_loss=0.889, val_lr=0.002]  4%|▍         | 42/1000 [3:21:45<76:05:27, 285.94s/epoch, accuracy=0.675, loss=0.893, lr=0.0002, val_accuracy=0.68, val_loss=0.883, val_lr=0.0002]  4%|▍         | 43/1000 [3:26:35<76:17:50, 287.01s/epoch, accuracy=0.675, loss=0.893, lr=0.0002, val_accuracy=0.68, val_loss=0.883, val_lr=0.0002]  4%|▍         | 44/1000 [3:31:16<75:46:39, 285.36s/epoch, accuracy=0.675, loss=0.893, lr=0.0002, val_accuracy=0.681, val_loss=0.882, val_lr=0.0002]  4%|▍         | 45/1000 [3:36:15<76:45:02, 289.32s/epoch, accuracy=0.675, loss=0.893, lr=0.0002, val_accuracy=0.681, val_loss=0.882, val_lr=0.0002]  5%|▍         | 46/1000 [3:41:01<76:26:56, 288.49s/epoch, accuracy=0.675, loss=0.893, lr=0.0002, val_accuracy=0.68, val_loss=0.882, val_lr=0.0002]   5%|▍         | 47/1000 [3:45:53<76:38:43, 289.53s/epoch, accuracy=0.675, loss=0.893, lr=0.0002, val_accuracy=0.678, val_loss=0.883, val_lr=0.0002]  5%|▍         | 48/1000 [3:50:43<76:34:35, 289.58s/epoch, accuracy=0.675, loss=0.893, lr=0.0002, val_accuracy=0.681, val_loss=0.882, val_lr=0.0002]  5%|▍         | 49/1000 [3:55:35<76:39:52, 290.21s/epoch, accuracy=0.675, loss=0.893, lr=0.0002, val_accuracy=0.681, val_loss=0.882, val_lr=0.0002]  5%|▌         | 50/1000 [4:00:27<76:44:10, 290.79s/epoch, accuracy=0.675, loss=0.893, lr=0.0002, val_accuracy=0.679, val_loss=0.883, val_lr=0.0002]  5%|▌         | 51/1000 [4:05:11<76:06:41, 288.73s/epoch, accuracy=0.675, loss=0.892, lr=0.0002, val_accuracy=0.679, val_loss=0.883, val_lr=0.0002]  5%|▌         | 52/1000 [4:09:54<75:35:01, 287.03s/epoch, accuracy=0.675, loss=0.892, lr=0.0002, val_accuracy=0.68, val_loss=0.882, val_lr=0.0002]   5%|▌         | 53/1000 [4:14:47<75:56:58, 288.72s/epoch, accuracy=0.675, loss=0.892, lr=0.0002, val_accuracy=0.679, val_loss=0.883, val_lr=0.0002]  5%|▌         | 54/1000 [4:19:32<75:34:55, 287.63s/epoch, accuracy=0.675, loss=0.892, lr=0.0002, val_accuracy=0.68, val_loss=0.883, val_lr=0.0002]   6%|▌         | 55/1000 [4:24:13<74:59:08, 285.66s/epoch, accuracy=0.675, loss=0.892, lr=0.0002, val_accuracy=0.678, val_loss=0.883, val_lr=0.0002]  6%|▌         | 56/1000 [4:28:53<74:27:55, 283.98s/epoch, accuracy=0.675, loss=0.892, lr=2e-5, val_accuracy=0.679, val_loss=0.882, val_lr=2e-5]      6%|▌         | 57/1000 [4:33:43<74:51:31, 285.78s/epoch, accuracy=0.675, loss=0.892, lr=2e-5, val_accuracy=0.68, val_loss=0.881, val_lr=2e-5]   6%|▌         | 58/1000 [4:38:26<74:36:08, 285.11s/epoch, accuracy=0.675, loss=0.892, lr=2e-5, val_accuracy=0.68, val_loss=0.881, val_lr=2e-5]  6%|▌         | 59/1000 [4:43:06<74:03:51, 283.35s/epoch, accuracy=0.675, loss=0.892, lr=2e-5, val_accuracy=0.68, val_loss=0.881, val_lr=2e-5]  6%|▌         | 60/1000 [4:48:17<76:11:07, 291.77s/epoch, accuracy=0.675, loss=0.892, lr=2e-5, val_accuracy=0.681, val_loss=0.881, val_lr=2e-5]  6%|▌         | 61/1000 [4:53:02<75:32:15, 289.60s/epoch, accuracy=0.675, loss=0.892, lr=2e-5, val_accuracy=0.68, val_loss=0.881, val_lr=2e-5]   6%|▌         | 62/1000 [4:57:42<74:43:39, 286.80s/epoch, accuracy=0.675, loss=0.892, lr=2e-5, val_accuracy=0.679, val_loss=0.883, val_lr=2e-5]  6%|▋         | 63/1000 [5:02:26<74:25:04, 285.92s/epoch, accuracy=0.675, loss=0.892, lr=2e-5, val_accuracy=0.68, val_loss=0.882, val_lr=2e-5]   6%|▋         | 64/1000 [5:07:15<74:38:02, 287.05s/epoch, accuracy=0.675, loss=0.892, lr=2e-5, val_accuracy=0.68, val_loss=0.882, val_lr=2e-5]  6%|▋         | 65/1000 [5:11:58<74:12:39, 285.73s/epoch, accuracy=0.675, loss=0.892, lr=2e-5, val_accuracy=0.68, val_loss=0.881, val_lr=2e-5]  6%|▋         | 65/1000 [5:11:58<74:47:38, 287.98s/epoch, accuracy=0.675, loss=0.892, lr=2e-5, val_accuracy=0.68, val_loss=0.881, val_lr=2e-5]
