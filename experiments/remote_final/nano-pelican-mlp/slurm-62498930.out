2024-06-18 13:13:15.687482: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-06-18 13:13:15.689007: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 13:13:15.744970: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 13:13:15.954392: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-06-18 13:13:18.085673: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-06-18 13:13:26.610297: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:282] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
Running train
Model: "functional_1"
┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓
┃ Layer (type)        ┃ Output Shape      ┃    Param # ┃ Connected to      ┃
┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩
│ input_layer         │ (None, 16, 4)     │          0 │ -                 │
│ (InputLayer)        │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ inner_product       │ [(None, 16, 16,   │          0 │ input_layer[0][0] │
│ (InnerProduct)      │ 1), (None, 16,    │            │                   │
│                     │ 16, 1)]           │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalization │ (None, 16, 16, 1) │          4 │ inner_product[0]… │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v2 (Lineq2v2) │ (None, 16, 16, 6) │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ diag_bias_dense     │ (None, 16, 16, 2) │         16 │ lineq2v2[0][0]    │
│ (DiagBiasDense)     │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ multiply (Multiply) │ (None, 16, 16, 2) │          0 │ diag_bias_dense[… │
│                     │                   │            │ inner_product[0]… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalizatio… │ (None, 16, 16, 2) │          8 │ multiply[0][0]    │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v0 (Lineq2v0) │ (None, 4)         │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense (Dense)       │ (None, 5)         │         25 │ lineq2v0[0][0]    │
└─────────────────────┴───────────────────┴────────────┴───────────────────┘
 Total params: 53 (212.00 B)
 Trainable params: 47 (188.00 B)
 Non-trainable params: 6 (24.00 B)
0epoch [00:00, ?epoch/s]  0%|          | 0/1000 [00:00<?, ?epoch/s]/cluster/home/okulseng/.local/lib64/python3.11/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:120: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
  self._warn_if_super_not_called()
  0%|          | 1/1000 [00:45<12:38:11, 45.54s/epoch, accuracy=0.454, loss=1.37, lr=0.002, val_accuracy=0.508, val_loss=1.2, val_lr=0.002]  0%|          | 2/1000 [01:28<12:11:22, 43.97s/epoch, accuracy=0.512, loss=1.19, lr=0.002, val_accuracy=0.517, val_loss=1.17, val_lr=0.002]  0%|          | 3/1000 [02:11<12:01:10, 43.40s/epoch, accuracy=0.523, loss=1.17, lr=0.002, val_accuracy=0.524, val_loss=1.16, val_lr=0.002]  0%|          | 4/1000 [02:53<11:53:57, 43.01s/epoch, accuracy=0.528, loss=1.16, lr=0.002, val_accuracy=0.53, val_loss=1.15, val_lr=0.002]   0%|          | 5/1000 [03:36<11:50:43, 42.86s/epoch, accuracy=0.532, loss=1.15, lr=0.002, val_accuracy=0.533, val_loss=1.14, val_lr=0.002]  1%|          | 6/1000 [04:18<11:47:58, 42.73s/epoch, accuracy=0.535, loss=1.14, lr=0.002, val_accuracy=0.536, val_loss=1.14, val_lr=0.002]  1%|          | 7/1000 [05:01<11:46:02, 42.66s/epoch, accuracy=0.537, loss=1.14, lr=0.002, val_accuracy=0.538, val_loss=1.13, val_lr=0.002]  1%|          | 8/1000 [05:43<11:43:44, 42.57s/epoch, accuracy=0.539, loss=1.14, lr=0.002, val_accuracy=0.538, val_loss=1.13, val_lr=0.002]  1%|          | 9/1000 [06:24<11:34:25, 42.04s/epoch, accuracy=0.54, loss=1.13, lr=0.002, val_accuracy=0.539, val_loss=1.13, val_lr=0.002]   1%|          | 10/1000 [07:05<11:28:52, 41.75s/epoch, accuracy=0.541, loss=1.13, lr=0.002, val_accuracy=0.54, val_loss=1.13, val_lr=0.002]  1%|          | 11/1000 [07:46<11:24:13, 41.51s/epoch, accuracy=0.542, loss=1.13, lr=0.002, val_accuracy=0.542, val_loss=1.13, val_lr=0.002]  1%|          | 12/1000 [08:27<11:20:55, 41.35s/epoch, accuracy=0.543, loss=1.13, lr=0.002, val_accuracy=0.545, val_loss=1.13, val_lr=0.002]  1%|▏         | 13/1000 [09:08<11:18:32, 41.25s/epoch, accuracy=0.544, loss=1.13, lr=0.002, val_accuracy=0.545, val_loss=1.12, val_lr=0.002]  1%|▏         | 14/1000 [09:49<11:17:23, 41.22s/epoch, accuracy=0.544, loss=1.13, lr=0.002, val_accuracy=0.543, val_loss=1.13, val_lr=0.002]  2%|▏         | 15/1000 [10:30<11:15:30, 41.15s/epoch, accuracy=0.545, loss=1.13, lr=0.002, val_accuracy=0.544, val_loss=1.12, val_lr=0.002]  2%|▏         | 16/1000 [11:11<11:13:33, 41.07s/epoch, accuracy=0.545, loss=1.13, lr=0.002, val_accuracy=0.545, val_loss=1.12, val_lr=0.002]  2%|▏         | 17/1000 [11:53<11:15:42, 41.24s/epoch, accuracy=0.545, loss=1.13, lr=0.002, val_accuracy=0.546, val_loss=1.12, val_lr=0.002]  2%|▏         | 18/1000 [12:35<11:19:02, 41.49s/epoch, accuracy=0.546, loss=1.13, lr=0.002, val_accuracy=0.546, val_loss=1.12, val_lr=0.002]  2%|▏         | 19/1000 [13:17<11:20:09, 41.60s/epoch, accuracy=0.546, loss=1.12, lr=0.002, val_accuracy=0.545, val_loss=1.12, val_lr=0.002]  2%|▏         | 20/1000 [13:58<11:20:06, 41.64s/epoch, accuracy=0.546, loss=1.12, lr=0.002, val_accuracy=0.545, val_loss=1.12, val_lr=0.002]  2%|▏         | 21/1000 [14:40<11:17:52, 41.55s/epoch, accuracy=0.547, loss=1.12, lr=0.002, val_accuracy=0.548, val_loss=1.12, val_lr=0.002]  2%|▏         | 22/1000 [15:21<11:17:02, 41.54s/epoch, accuracy=0.547, loss=1.12, lr=0.002, val_accuracy=0.548, val_loss=1.12, val_lr=0.002]  2%|▏         | 23/1000 [16:03<11:15:42, 41.50s/epoch, accuracy=0.547, loss=1.12, lr=0.002, val_accuracy=0.545, val_loss=1.12, val_lr=0.002]  2%|▏         | 24/1000 [16:44<11:14:16, 41.45s/epoch, accuracy=0.548, loss=1.12, lr=0.002, val_accuracy=0.545, val_loss=1.12, val_lr=0.002]  2%|▎         | 25/1000 [17:25<11:13:58, 41.48s/epoch, accuracy=0.548, loss=1.12, lr=0.002, val_accuracy=0.545, val_loss=1.12, val_lr=0.002]  3%|▎         | 26/1000 [18:07<11:12:28, 41.43s/epoch, accuracy=0.549, loss=1.12, lr=0.002, val_accuracy=0.547, val_loss=1.12, val_lr=0.002]  3%|▎         | 27/1000 [18:48<11:10:38, 41.35s/epoch, accuracy=0.549, loss=1.12, lr=0.002, val_accuracy=0.55, val_loss=1.12, val_lr=0.002]   3%|▎         | 28/1000 [19:29<11:10:30, 41.39s/epoch, accuracy=0.549, loss=1.12, lr=0.002, val_accuracy=0.55, val_loss=1.12, val_lr=0.002]  3%|▎         | 29/1000 [20:11<11:09:47, 41.39s/epoch, accuracy=0.55, loss=1.12, lr=0.002, val_accuracy=0.546, val_loss=1.12, val_lr=0.002]  3%|▎         | 30/1000 [20:52<11:07:48, 41.31s/epoch, accuracy=0.55, loss=1.12, lr=0.002, val_accuracy=0.549, val_loss=1.12, val_lr=0.002]  3%|▎         | 31/1000 [21:33<11:06:57, 41.30s/epoch, accuracy=0.55, loss=1.12, lr=0.002, val_accuracy=0.547, val_loss=1.12, val_lr=0.002]  3%|▎         | 32/1000 [22:15<11:07:18, 41.36s/epoch, accuracy=0.55, loss=1.12, lr=0.002, val_accuracy=0.545, val_loss=1.12, val_lr=0.002]  3%|▎         | 33/1000 [22:56<11:06:04, 41.33s/epoch, accuracy=0.55, loss=1.12, lr=0.002, val_accuracy=0.552, val_loss=1.12, val_lr=0.002]  3%|▎         | 34/1000 [23:37<11:05:54, 41.36s/epoch, accuracy=0.55, loss=1.12, lr=0.002, val_accuracy=0.553, val_loss=1.12, val_lr=0.002]  4%|▎         | 35/1000 [24:19<11:05:23, 41.37s/epoch, accuracy=0.551, loss=1.12, lr=0.002, val_accuracy=0.54, val_loss=1.12, val_lr=0.002]  4%|▎         | 36/1000 [25:00<11:04:48, 41.38s/epoch, accuracy=0.551, loss=1.12, lr=0.002, val_accuracy=0.555, val_loss=1.12, val_lr=0.002]  4%|▎         | 37/1000 [25:41<11:02:55, 41.30s/epoch, accuracy=0.551, loss=1.12, lr=0.002, val_accuracy=0.55, val_loss=1.12, val_lr=0.002]   4%|▍         | 38/1000 [26:23<11:02:08, 41.30s/epoch, accuracy=0.551, loss=1.12, lr=0.002, val_accuracy=0.547, val_loss=1.12, val_lr=0.002]  4%|▍         | 39/1000 [27:04<11:02:22, 41.35s/epoch, accuracy=0.551, loss=1.12, lr=0.002, val_accuracy=0.555, val_loss=1.12, val_lr=0.002]  4%|▍         | 40/1000 [27:46<11:02:57, 41.44s/epoch, accuracy=0.551, loss=1.12, lr=0.002, val_accuracy=0.553, val_loss=1.12, val_lr=0.002]  4%|▍         | 41/1000 [28:27<11:02:02, 41.42s/epoch, accuracy=0.551, loss=1.12, lr=0.002, val_accuracy=0.537, val_loss=1.13, val_lr=0.002]  4%|▍         | 42/1000 [29:08<11:00:23, 41.36s/epoch, accuracy=0.551, loss=1.12, lr=0.002, val_accuracy=0.551, val_loss=1.12, val_lr=0.002]  4%|▍         | 43/1000 [29:49<10:58:52, 41.31s/epoch, accuracy=0.551, loss=1.12, lr=0.002, val_accuracy=0.548, val_loss=1.12, val_lr=0.002]  4%|▍         | 44/1000 [30:31<10:56:59, 41.23s/epoch, accuracy=0.551, loss=1.12, lr=0.002, val_accuracy=0.545, val_loss=1.12, val_lr=0.002]  4%|▍         | 45/1000 [31:12<10:56:04, 41.22s/epoch, accuracy=0.551, loss=1.12, lr=0.002, val_accuracy=0.553, val_loss=1.12, val_lr=0.002]  5%|▍         | 46/1000 [31:53<10:57:50, 41.37s/epoch, accuracy=0.552, loss=1.12, lr=0.002, val_accuracy=0.551, val_loss=1.12, val_lr=0.002]  5%|▍         | 47/1000 [32:35<10:58:50, 41.48s/epoch, accuracy=0.552, loss=1.12, lr=0.002, val_accuracy=0.546, val_loss=1.12, val_lr=0.002]  5%|▍         | 48/1000 [33:17<11:00:25, 41.62s/epoch, accuracy=0.551, loss=1.12, lr=0.002, val_accuracy=0.553, val_loss=1.12, val_lr=0.002]  5%|▍         | 49/1000 [33:59<11:00:23, 41.66s/epoch, accuracy=0.552, loss=1.12, lr=0.002, val_accuracy=0.545, val_loss=1.12, val_lr=0.002]  5%|▌         | 50/1000 [34:41<11:00:21, 41.71s/epoch, accuracy=0.552, loss=1.12, lr=0.0002, val_accuracy=0.55, val_loss=1.12, val_lr=0.0002]  5%|▌         | 51/1000 [35:22<10:58:32, 41.64s/epoch, accuracy=0.552, loss=1.12, lr=0.0002, val_accuracy=0.551, val_loss=1.12, val_lr=0.0002]  5%|▌         | 52/1000 [36:04<10:57:11, 41.59s/epoch, accuracy=0.552, loss=1.12, lr=0.0002, val_accuracy=0.553, val_loss=1.12, val_lr=0.0002]  5%|▌         | 53/1000 [36:45<10:55:30, 41.53s/epoch, accuracy=0.552, loss=1.12, lr=0.0002, val_accuracy=0.547, val_loss=1.12, val_lr=0.0002]  5%|▌         | 54/1000 [37:26<10:54:21, 41.50s/epoch, accuracy=0.552, loss=1.12, lr=0.0002, val_accuracy=0.549, val_loss=1.12, val_lr=0.0002]  6%|▌         | 55/1000 [38:08<10:52:14, 41.41s/epoch, accuracy=0.552, loss=1.12, lr=0.0002, val_accuracy=0.555, val_loss=1.12, val_lr=0.0002]  6%|▌         | 56/1000 [38:49<10:51:32, 41.41s/epoch, accuracy=0.552, loss=1.12, lr=0.0002, val_accuracy=0.549, val_loss=1.12, val_lr=0.0002]  6%|▌         | 57/1000 [39:30<10:49:45, 41.34s/epoch, accuracy=0.552, loss=1.12, lr=0.0002, val_accuracy=0.547, val_loss=1.12, val_lr=0.0002]  6%|▌         | 58/1000 [40:12<10:49:18, 41.36s/epoch, accuracy=0.552, loss=1.12, lr=0.0002, val_accuracy=0.55, val_loss=1.12, val_lr=0.0002]   6%|▌         | 59/1000 [40:53<10:46:50, 41.24s/epoch, accuracy=0.552, loss=1.12, lr=0.0002, val_accuracy=0.553, val_loss=1.12, val_lr=0.0002]  6%|▌         | 59/1000 [40:53<10:52:05, 41.58s/epoch, accuracy=0.552, loss=1.12, lr=0.0002, val_accuracy=0.553, val_loss=1.12, val_lr=0.0002]
