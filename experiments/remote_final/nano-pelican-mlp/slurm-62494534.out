2024-06-18 11:44:39.815494: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-06-18 11:44:39.817584: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 11:44:39.877810: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 11:44:40.186321: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-06-18 11:44:42.544036: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-06-18 11:44:54.715187: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:282] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
Running train
Model: "functional_1"
┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓
┃ Layer (type)        ┃ Output Shape      ┃    Param # ┃ Connected to      ┃
┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩
│ input_layer         │ (None, 16, 4)     │          0 │ -                 │
│ (InputLayer)        │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ inner_product       │ [(None, 16, 16,   │          0 │ input_layer[0][0] │
│ (InnerProduct)      │ 1), (None, 16,    │            │                   │
│                     │ 16, 1)]           │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalization │ (None, 16, 16, 1) │          4 │ inner_product[0]… │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v2 (Lineq2v2) │ (None, 16, 16, 6) │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ diag_bias_dense     │ (None, 16, 16, 8) │         64 │ lineq2v2[0][0]    │
│ (DiagBiasDense)     │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ multiply (Multiply) │ (None, 16, 16, 8) │          0 │ diag_bias_dense[… │
│                     │                   │            │ inner_product[0]… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalizatio… │ (None, 16, 16, 8) │         32 │ multiply[0][0]    │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v0 (Lineq2v0) │ (None, 16)        │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense (Dense)       │ (None, 5)         │         85 │ lineq2v0[0][0]    │
└─────────────────────┴───────────────────┴────────────┴───────────────────┘
 Total params: 185 (740.00 B)
 Trainable params: 167 (668.00 B)
 Non-trainable params: 18 (72.00 B)
0epoch [00:00, ?epoch/s]  0%|          | 0/1000 [00:00<?, ?epoch/s]/cluster/home/okulseng/.local/lib64/python3.11/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:120: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
  self._warn_if_super_not_called()
  0%|          | 1/1000 [00:56<15:43:12, 56.65s/epoch, accuracy=0.491, loss=1.26, lr=0.002, val_accuracy=0.521, val_loss=1.16, val_lr=0.002]  0%|          | 2/1000 [01:50<15:18:34, 55.23s/epoch, accuracy=0.531, loss=1.15, lr=0.002, val_accuracy=0.535, val_loss=1.14, val_lr=0.002]  0%|          | 3/1000 [02:45<15:10:37, 54.80s/epoch, accuracy=0.54, loss=1.13, lr=0.002, val_accuracy=0.543, val_loss=1.13, val_lr=0.002]   0%|          | 4/1000 [03:39<15:05:44, 54.56s/epoch, accuracy=0.545, loss=1.12, lr=0.002, val_accuracy=0.547, val_loss=1.12, val_lr=0.002]  0%|          | 5/1000 [04:33<15:02:57, 54.45s/epoch, accuracy=0.548, loss=1.12, lr=0.002, val_accuracy=0.553, val_loss=1.12, val_lr=0.002]  1%|          | 6/1000 [05:27<14:59:52, 54.32s/epoch, accuracy=0.551, loss=1.11, lr=0.002, val_accuracy=0.552, val_loss=1.11, val_lr=0.002]  1%|          | 7/1000 [06:21<14:58:40, 54.30s/epoch, accuracy=0.554, loss=1.11, lr=0.002, val_accuracy=0.559, val_loss=1.1, val_lr=0.002]   1%|          | 8/1000 [07:16<14:56:29, 54.22s/epoch, accuracy=0.556, loss=1.11, lr=0.002, val_accuracy=0.54, val_loss=1.11, val_lr=0.002]  1%|          | 9/1000 [08:10<14:55:33, 54.22s/epoch, accuracy=0.558, loss=1.1, lr=0.002, val_accuracy=0.553, val_loss=1.11, val_lr=0.002]  1%|          | 10/1000 [09:04<14:53:46, 54.17s/epoch, accuracy=0.559, loss=1.1, lr=0.002, val_accuracy=0.563, val_loss=1.1, val_lr=0.002]  1%|          | 11/1000 [09:58<14:53:28, 54.20s/epoch, accuracy=0.56, loss=1.1, lr=0.002, val_accuracy=0.564, val_loss=1.1, val_lr=0.002]   1%|          | 12/1000 [10:52<14:52:42, 54.21s/epoch, accuracy=0.561, loss=1.1, lr=0.002, val_accuracy=0.565, val_loss=1.1, val_lr=0.002]  1%|▏         | 13/1000 [11:46<14:51:36, 54.20s/epoch, accuracy=0.561, loss=1.1, lr=0.002, val_accuracy=0.565, val_loss=1.1, val_lr=0.002]  1%|▏         | 14/1000 [12:41<14:50:19, 54.18s/epoch, accuracy=0.562, loss=1.1, lr=0.002, val_accuracy=0.567, val_loss=1.09, val_lr=0.002]  2%|▏         | 15/1000 [13:35<14:49:57, 54.21s/epoch, accuracy=0.561, loss=1.1, lr=0.002, val_accuracy=0.566, val_loss=1.09, val_lr=0.002]  2%|▏         | 16/1000 [14:29<14:49:09, 54.22s/epoch, accuracy=0.563, loss=1.09, lr=0.002, val_accuracy=0.568, val_loss=1.1, val_lr=0.002]  2%|▏         | 17/1000 [15:23<14:48:51, 54.25s/epoch, accuracy=0.563, loss=1.09, lr=0.002, val_accuracy=0.569, val_loss=1.09, val_lr=0.002]  2%|▏         | 18/1000 [16:18<14:47:49, 54.25s/epoch, accuracy=0.563, loss=1.09, lr=0.002, val_accuracy=0.556, val_loss=1.09, val_lr=0.002]  2%|▏         | 19/1000 [17:12<14:46:46, 54.24s/epoch, accuracy=0.563, loss=1.09, lr=0.002, val_accuracy=0.569, val_loss=1.09, val_lr=0.002]  2%|▏         | 20/1000 [18:06<14:45:48, 54.23s/epoch, accuracy=0.564, loss=1.09, lr=0.002, val_accuracy=0.567, val_loss=1.09, val_lr=0.002]  2%|▏         | 21/1000 [19:00<14:45:23, 54.26s/epoch, accuracy=0.564, loss=1.09, lr=0.002, val_accuracy=0.57, val_loss=1.09, val_lr=0.002]   2%|▏         | 22/1000 [19:55<14:44:20, 54.25s/epoch, accuracy=0.564, loss=1.09, lr=0.002, val_accuracy=0.561, val_loss=1.1, val_lr=0.002]  2%|▏         | 23/1000 [20:49<14:42:43, 54.21s/epoch, accuracy=0.565, loss=1.09, lr=0.002, val_accuracy=0.563, val_loss=1.09, val_lr=0.002]  2%|▏         | 24/1000 [21:43<14:42:34, 54.26s/epoch, accuracy=0.565, loss=1.09, lr=0.002, val_accuracy=0.572, val_loss=1.08, val_lr=0.002]  2%|▎         | 25/1000 [22:37<14:40:51, 54.21s/epoch, accuracy=0.565, loss=1.09, lr=0.002, val_accuracy=0.556, val_loss=1.1, val_lr=0.002]   3%|▎         | 26/1000 [23:31<14:39:39, 54.19s/epoch, accuracy=0.565, loss=1.09, lr=0.002, val_accuracy=0.573, val_loss=1.09, val_lr=0.002]  3%|▎         | 27/1000 [24:25<14:37:42, 54.12s/epoch, accuracy=0.566, loss=1.09, lr=0.002, val_accuracy=0.571, val_loss=1.09, val_lr=0.002]  3%|▎         | 28/1000 [25:20<14:36:53, 54.13s/epoch, accuracy=0.566, loss=1.09, lr=0.002, val_accuracy=0.566, val_loss=1.09, val_lr=0.002]  3%|▎         | 29/1000 [26:14<14:36:23, 54.15s/epoch, accuracy=0.566, loss=1.09, lr=0.002, val_accuracy=0.568, val_loss=1.09, val_lr=0.002]  3%|▎         | 30/1000 [27:08<14:34:28, 54.09s/epoch, accuracy=0.566, loss=1.09, lr=0.002, val_accuracy=0.567, val_loss=1.1, val_lr=0.002]   3%|▎         | 31/1000 [28:02<14:33:24, 54.08s/epoch, accuracy=0.567, loss=1.09, lr=0.002, val_accuracy=0.553, val_loss=1.11, val_lr=0.002]  3%|▎         | 32/1000 [28:55<14:30:16, 53.94s/epoch, accuracy=0.566, loss=1.09, lr=0.002, val_accuracy=0.573, val_loss=1.09, val_lr=0.002]  3%|▎         | 33/1000 [29:49<14:28:24, 53.88s/epoch, accuracy=0.567, loss=1.09, lr=0.002, val_accuracy=0.574, val_loss=1.09, val_lr=0.002]  3%|▎         | 34/1000 [30:43<14:27:19, 53.87s/epoch, accuracy=0.567, loss=1.09, lr=0.002, val_accuracy=0.577, val_loss=1.08, val_lr=0.002]  4%|▎         | 35/1000 [31:37<14:25:57, 53.84s/epoch, accuracy=0.568, loss=1.09, lr=0.002, val_accuracy=0.565, val_loss=1.09, val_lr=0.002]  4%|▎         | 36/1000 [32:30<14:24:47, 53.83s/epoch, accuracy=0.568, loss=1.09, lr=0.002, val_accuracy=0.577, val_loss=1.09, val_lr=0.002]  4%|▎         | 37/1000 [33:25<14:24:49, 53.88s/epoch, accuracy=0.567, loss=1.09, lr=0.002, val_accuracy=0.571, val_loss=1.09, val_lr=0.002]  4%|▍         | 38/1000 [34:18<14:23:54, 53.88s/epoch, accuracy=0.568, loss=1.09, lr=0.002, val_accuracy=0.552, val_loss=1.11, val_lr=0.002]  4%|▍         | 39/1000 [35:12<14:22:37, 53.86s/epoch, accuracy=0.567, loss=1.09, lr=0.002, val_accuracy=0.574, val_loss=1.08, val_lr=0.002]  4%|▍         | 40/1000 [36:06<14:21:24, 53.84s/epoch, accuracy=0.568, loss=1.09, lr=0.002, val_accuracy=0.563, val_loss=1.08, val_lr=0.002]  4%|▍         | 41/1000 [37:00<14:20:07, 53.81s/epoch, accuracy=0.568, loss=1.08, lr=0.002, val_accuracy=0.556, val_loss=1.1, val_lr=0.002]   4%|▍         | 42/1000 [37:54<14:19:13, 53.81s/epoch, accuracy=0.567, loss=1.09, lr=0.002, val_accuracy=0.573, val_loss=1.08, val_lr=0.002]  4%|▍         | 43/1000 [38:48<14:19:01, 53.86s/epoch, accuracy=0.568, loss=1.08, lr=0.002, val_accuracy=0.569, val_loss=1.09, val_lr=0.002]  4%|▍         | 44/1000 [39:41<14:17:41, 53.83s/epoch, accuracy=0.568, loss=1.08, lr=0.002, val_accuracy=0.567, val_loss=1.09, val_lr=0.002]  4%|▍         | 45/1000 [40:35<14:16:30, 53.81s/epoch, accuracy=0.57, loss=1.08, lr=0.0002, val_accuracy=0.577, val_loss=1.08, val_lr=0.0002]  5%|▍         | 46/1000 [41:29<14:15:24, 53.80s/epoch, accuracy=0.57, loss=1.08, lr=0.0002, val_accuracy=0.576, val_loss=1.08, val_lr=0.0002]  5%|▍         | 47/1000 [42:23<14:14:08, 53.78s/epoch, accuracy=0.57, loss=1.08, lr=0.0002, val_accuracy=0.575, val_loss=1.08, val_lr=0.0002]  5%|▍         | 48/1000 [43:16<14:13:42, 53.80s/epoch, accuracy=0.57, loss=1.08, lr=0.0002, val_accuracy=0.576, val_loss=1.08, val_lr=0.0002]  5%|▍         | 49/1000 [44:10<14:12:44, 53.80s/epoch, accuracy=0.57, loss=1.08, lr=0.0002, val_accuracy=0.575, val_loss=1.08, val_lr=0.0002]  5%|▌         | 50/1000 [45:04<14:12:10, 53.82s/epoch, accuracy=0.57, loss=1.08, lr=0.0002, val_accuracy=0.574, val_loss=1.08, val_lr=0.0002]  5%|▌         | 51/1000 [45:59<14:14:46, 54.04s/epoch, accuracy=0.57, loss=1.08, lr=0.0002, val_accuracy=0.577, val_loss=1.08, val_lr=0.0002]  5%|▌         | 52/1000 [46:53<14:15:52, 54.17s/epoch, accuracy=0.57, loss=1.08, lr=0.0002, val_accuracy=0.575, val_loss=1.08, val_lr=0.0002]  5%|▌         | 53/1000 [47:48<14:17:24, 54.32s/epoch, accuracy=0.57, loss=1.08, lr=0.0002, val_accuracy=0.575, val_loss=1.08, val_lr=0.0002]  5%|▌         | 54/1000 [48:42<14:17:22, 54.38s/epoch, accuracy=0.57, loss=1.08, lr=0.0002, val_accuracy=0.576, val_loss=1.08, val_lr=0.0002]  6%|▌         | 55/1000 [49:37<14:17:09, 54.42s/epoch, accuracy=0.57, loss=1.08, lr=0.0002, val_accuracy=0.574, val_loss=1.08, val_lr=0.0002]  6%|▌         | 56/1000 [50:31<14:16:50, 54.46s/epoch, accuracy=0.57, loss=1.08, lr=2e-5, val_accuracy=0.576, val_loss=1.08, val_lr=2e-5]      6%|▌         | 57/1000 [51:26<14:15:32, 54.44s/epoch, accuracy=0.571, loss=1.08, lr=2e-5, val_accuracy=0.574, val_loss=1.08, val_lr=2e-5]  6%|▌         | 58/1000 [52:20<14:15:46, 54.51s/epoch, accuracy=0.571, loss=1.08, lr=2e-5, val_accuracy=0.575, val_loss=1.08, val_lr=2e-5]  6%|▌         | 59/1000 [53:15<14:15:41, 54.56s/epoch, accuracy=0.57, loss=1.08, lr=2e-5, val_accuracy=0.576, val_loss=1.08, val_lr=2e-5]   6%|▌         | 60/1000 [54:10<14:14:26, 54.54s/epoch, accuracy=0.57, loss=1.08, lr=2e-5, val_accuracy=0.575, val_loss=1.08, val_lr=2e-5]  6%|▌         | 61/1000 [55:04<14:14:12, 54.58s/epoch, accuracy=0.57, loss=1.08, lr=2e-5, val_accuracy=0.575, val_loss=1.08, val_lr=2e-5]  6%|▌         | 62/1000 [55:59<14:14:01, 54.63s/epoch, accuracy=0.571, loss=1.08, lr=2e-5, val_accuracy=0.575, val_loss=1.08, val_lr=2e-5]  6%|▋         | 63/1000 [56:53<14:12:07, 54.56s/epoch, accuracy=0.57, loss=1.08, lr=2e-5, val_accuracy=0.576, val_loss=1.08, val_lr=2e-5]   6%|▋         | 64/1000 [57:48<14:12:51, 54.67s/epoch, accuracy=0.571, loss=1.08, lr=2e-5, val_accuracy=0.576, val_loss=1.08, val_lr=2e-5]  6%|▋         | 65/1000 [58:43<14:12:12, 54.69s/epoch, accuracy=0.57, loss=1.08, lr=2e-5, val_accuracy=0.574, val_loss=1.08, val_lr=2e-5]   6%|▋         | 65/1000 [58:43<14:04:45, 54.21s/epoch, accuracy=0.57, loss=1.08, lr=2e-5, val_accuracy=0.574, val_loss=1.08, val_lr=2e-5]
