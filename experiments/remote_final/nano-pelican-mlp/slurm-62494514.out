2024-06-18 11:43:26.548294: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-06-18 11:43:26.551591: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 11:43:26.622180: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 11:43:27.027052: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-06-18 11:43:29.007491: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-06-18 11:43:41.898963: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:282] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
Running train
Model: "functional_1"
┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓
┃ Layer (type)        ┃ Output Shape      ┃    Param # ┃ Connected to      ┃
┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩
│ input_layer         │ (None, 16, 4)     │          0 │ -                 │
│ (InputLayer)        │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ inner_product       │ [(None, 16, 16,   │          0 │ input_layer[0][0] │
│ (InnerProduct)      │ 1), (None, 16,    │            │                   │
│                     │ 16, 1)]           │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalization │ (None, 16, 16, 1) │          4 │ inner_product[0]… │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v2 (Lineq2v2) │ (None, 16, 16, 6) │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ diag_bias_dense     │ (None, 16, 16, 8) │         64 │ lineq2v2[0][0]    │
│ (DiagBiasDense)     │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ multiply (Multiply) │ (None, 16, 16, 8) │          0 │ diag_bias_dense[… │
│                     │                   │            │ inner_product[0]… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalizatio… │ (None, 16, 16, 8) │         32 │ multiply[0][0]    │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v0 (Lineq2v0) │ (None, 16)        │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense (Dense)       │ (None, 5)         │         85 │ lineq2v0[0][0]    │
└─────────────────────┴───────────────────┴────────────┴───────────────────┘
 Total params: 185 (740.00 B)
 Trainable params: 167 (668.00 B)
 Non-trainable params: 18 (72.00 B)
0epoch [00:00, ?epoch/s]  0%|          | 0/1000 [00:00<?, ?epoch/s]/cluster/home/okulseng/.local/lib64/python3.11/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:120: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
  self._warn_if_super_not_called()
  0%|          | 1/1000 [00:46<12:59:16, 46.80s/epoch, accuracy=0.482, loss=1.24, lr=0.002, val_accuracy=0.512, val_loss=1.15, val_lr=0.002]  0%|          | 2/1000 [01:31<12:40:37, 45.73s/epoch, accuracy=0.535, loss=1.14, lr=0.002, val_accuracy=0.515, val_loss=1.15, val_lr=0.002]  0%|          | 3/1000 [02:16<12:34:03, 45.38s/epoch, accuracy=0.542, loss=1.13, lr=0.002, val_accuracy=0.514, val_loss=1.13, val_lr=0.002]  0%|          | 4/1000 [03:01<12:29:29, 45.15s/epoch, accuracy=0.546, loss=1.13, lr=0.002, val_accuracy=0.554, val_loss=1.12, val_lr=0.002]  0%|          | 5/1000 [03:46<12:27:11, 45.06s/epoch, accuracy=0.548, loss=1.13, lr=0.002, val_accuracy=0.553, val_loss=1.12, val_lr=0.002]  1%|          | 6/1000 [04:31<12:27:21, 45.11s/epoch, accuracy=0.549, loss=1.12, lr=0.002, val_accuracy=0.557, val_loss=1.11, val_lr=0.002]  1%|          | 7/1000 [05:16<12:26:42, 45.12s/epoch, accuracy=0.551, loss=1.12, lr=0.002, val_accuracy=0.555, val_loss=1.11, val_lr=0.002]  1%|          | 8/1000 [06:01<12:26:00, 45.12s/epoch, accuracy=0.553, loss=1.11, lr=0.002, val_accuracy=0.561, val_loss=1.11, val_lr=0.002]  1%|          | 9/1000 [06:46<12:24:01, 45.05s/epoch, accuracy=0.554, loss=1.11, lr=0.002, val_accuracy=0.56, val_loss=1.11, val_lr=0.002]   1%|          | 10/1000 [07:31<12:22:06, 44.98s/epoch, accuracy=0.557, loss=1.11, lr=0.002, val_accuracy=0.566, val_loss=1.1, val_lr=0.002]  1%|          | 11/1000 [08:16<12:22:01, 45.02s/epoch, accuracy=0.557, loss=1.1, lr=0.002, val_accuracy=0.568, val_loss=1.1, val_lr=0.002]   1%|          | 12/1000 [09:01<12:20:15, 44.95s/epoch, accuracy=0.559, loss=1.1, lr=0.002, val_accuracy=0.551, val_loss=1.1, val_lr=0.002]  1%|▏         | 13/1000 [09:46<12:19:38, 44.96s/epoch, accuracy=0.56, loss=1.1, lr=0.002, val_accuracy=0.554, val_loss=1.1, val_lr=0.002]   1%|▏         | 14/1000 [10:31<12:18:29, 44.94s/epoch, accuracy=0.561, loss=1.1, lr=0.002, val_accuracy=0.57, val_loss=1.1, val_lr=0.002]  2%|▏         | 15/1000 [11:16<12:17:22, 44.92s/epoch, accuracy=0.561, loss=1.1, lr=0.002, val_accuracy=0.562, val_loss=1.1, val_lr=0.002]  2%|▏         | 16/1000 [12:01<12:16:26, 44.90s/epoch, accuracy=0.562, loss=1.1, lr=0.002, val_accuracy=0.568, val_loss=1.09, val_lr=0.002]  2%|▏         | 17/1000 [12:46<12:15:42, 44.91s/epoch, accuracy=0.564, loss=1.09, lr=0.002, val_accuracy=0.57, val_loss=1.09, val_lr=0.002]  2%|▏         | 18/1000 [13:31<12:15:26, 44.94s/epoch, accuracy=0.564, loss=1.09, lr=0.002, val_accuracy=0.573, val_loss=1.09, val_lr=0.002]  2%|▏         | 19/1000 [14:15<12:13:48, 44.88s/epoch, accuracy=0.564, loss=1.09, lr=0.002, val_accuracy=0.565, val_loss=1.09, val_lr=0.002]  2%|▏         | 20/1000 [15:00<12:12:53, 44.87s/epoch, accuracy=0.565, loss=1.09, lr=0.002, val_accuracy=0.566, val_loss=1.09, val_lr=0.002]  2%|▏         | 21/1000 [15:51<12:41:49, 46.69s/epoch, accuracy=0.565, loss=1.09, lr=0.002, val_accuracy=0.565, val_loss=1.09, val_lr=0.002]  2%|▏         | 22/1000 [16:36<12:33:17, 46.21s/epoch, accuracy=0.565, loss=1.09, lr=0.002, val_accuracy=0.567, val_loss=1.09, val_lr=0.002]  2%|▏         | 23/1000 [17:21<12:25:35, 45.79s/epoch, accuracy=0.565, loss=1.09, lr=0.002, val_accuracy=0.568, val_loss=1.09, val_lr=0.002]  2%|▏         | 24/1000 [18:06<12:21:07, 45.56s/epoch, accuracy=0.565, loss=1.09, lr=0.002, val_accuracy=0.563, val_loss=1.09, val_lr=0.002]  2%|▎         | 25/1000 [18:51<12:16:50, 45.34s/epoch, accuracy=0.566, loss=1.09, lr=0.002, val_accuracy=0.573, val_loss=1.09, val_lr=0.002]  3%|▎         | 26/1000 [19:36<12:14:27, 45.24s/epoch, accuracy=0.565, loss=1.09, lr=0.002, val_accuracy=0.551, val_loss=1.09, val_lr=0.002]  3%|▎         | 27/1000 [20:21<12:12:41, 45.18s/epoch, accuracy=0.566, loss=1.09, lr=0.002, val_accuracy=0.568, val_loss=1.09, val_lr=0.002]  3%|▎         | 28/1000 [21:06<12:10:08, 45.07s/epoch, accuracy=0.566, loss=1.09, lr=0.002, val_accuracy=0.559, val_loss=1.1, val_lr=0.002]   3%|▎         | 29/1000 [21:51<12:08:08, 44.99s/epoch, accuracy=0.565, loss=1.09, lr=0.002, val_accuracy=0.561, val_loss=1.09, val_lr=0.002]  3%|▎         | 30/1000 [22:35<12:06:44, 44.95s/epoch, accuracy=0.566, loss=1.09, lr=0.002, val_accuracy=0.565, val_loss=1.09, val_lr=0.002]  3%|▎         | 31/1000 [23:21<12:07:11, 45.03s/epoch, accuracy=0.566, loss=1.09, lr=0.002, val_accuracy=0.559, val_loss=1.09, val_lr=0.002]  3%|▎         | 32/1000 [24:06<12:06:19, 45.02s/epoch, accuracy=0.566, loss=1.09, lr=0.002, val_accuracy=0.562, val_loss=1.12, val_lr=0.002]  3%|▎         | 33/1000 [24:51<12:06:01, 45.05s/epoch, accuracy=0.566, loss=1.09, lr=0.002, val_accuracy=0.569, val_loss=1.09, val_lr=0.002]  3%|▎         | 34/1000 [25:36<12:04:57, 45.03s/epoch, accuracy=0.566, loss=1.09, lr=0.002, val_accuracy=0.573, val_loss=1.08, val_lr=0.002]  4%|▎         | 35/1000 [26:21<12:04:12, 45.03s/epoch, accuracy=0.566, loss=1.09, lr=0.002, val_accuracy=0.557, val_loss=1.09, val_lr=0.002]  4%|▎         | 36/1000 [27:06<12:04:54, 45.12s/epoch, accuracy=0.57, loss=1.08, lr=0.0002, val_accuracy=0.571, val_loss=1.08, val_lr=0.0002]  4%|▎         | 37/1000 [27:51<12:03:07, 45.05s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.576, val_loss=1.08, val_lr=0.0002]  4%|▍         | 38/1000 [28:36<12:03:44, 45.14s/epoch, accuracy=0.57, loss=1.08, lr=0.0002, val_accuracy=0.578, val_loss=1.08, val_lr=0.0002]   4%|▍         | 39/1000 [29:21<12:02:23, 45.10s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.572, val_loss=1.08, val_lr=0.0002]  4%|▍         | 40/1000 [30:06<12:01:36, 45.10s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.579, val_loss=1.08, val_lr=0.0002]  4%|▍         | 41/1000 [30:52<12:02:08, 45.18s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.578, val_loss=1.08, val_lr=0.0002]  4%|▍         | 42/1000 [31:37<12:00:34, 45.13s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.575, val_loss=1.08, val_lr=0.0002]  4%|▍         | 43/1000 [32:22<12:00:11, 45.15s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.569, val_loss=1.08, val_lr=0.0002]  4%|▍         | 44/1000 [33:07<11:57:52, 45.06s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.574, val_loss=1.08, val_lr=0.0002]  4%|▍         | 45/1000 [33:52<11:56:27, 45.01s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.577, val_loss=1.08, val_lr=0.0002]  5%|▍         | 46/1000 [34:37<11:55:58, 45.03s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.576, val_loss=1.08, val_lr=0.0002]  5%|▍         | 47/1000 [35:22<11:55:42, 45.06s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.577, val_loss=1.08, val_lr=0.0002]  5%|▍         | 48/1000 [36:07<11:55:23, 45.09s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.571, val_loss=1.08, val_lr=0.0002]  5%|▍         | 49/1000 [36:52<11:54:46, 45.10s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.579, val_loss=1.08, val_lr=0.0002]  5%|▌         | 50/1000 [38:14<14:50:27, 56.24s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.576, val_loss=1.08, val_lr=0.0002]  5%|▌         | 51/1000 [39:00<13:57:00, 52.92s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.577, val_loss=1.08, val_lr=0.0002]  5%|▌         | 52/1000 [39:45<13:18:40, 50.55s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.576, val_loss=1.08, val_lr=0.0002]  5%|▌         | 53/1000 [40:29<12:50:55, 48.84s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.576, val_loss=1.08, val_lr=0.0002]  5%|▌         | 54/1000 [41:14<12:31:13, 47.65s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.575, val_loss=1.08, val_lr=0.0002]  6%|▌         | 55/1000 [41:59<12:18:15, 46.87s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.57, val_loss=1.08, val_lr=0.0002]   6%|▌         | 56/1000 [42:45<12:09:42, 46.38s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.575, val_loss=1.08, val_lr=0.0002]  6%|▌         | 57/1000 [43:30<12:03:09, 46.01s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.574, val_loss=1.08, val_lr=0.0002]  6%|▌         | 58/1000 [44:15<11:58:44, 45.78s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.57, val_loss=1.08, val_lr=0.0002]   6%|▌         | 59/1000 [45:00<11:54:47, 45.58s/epoch, accuracy=0.571, loss=1.08, lr=0.0002, val_accuracy=0.573, val_loss=1.08, val_lr=0.0002]  6%|▌         | 60/1000 [45:45<11:52:46, 45.50s/epoch, accuracy=0.572, loss=1.08, lr=2e-5, val_accuracy=0.574, val_loss=1.08, val_lr=2e-5]      6%|▌         | 61/1000 [46:30<11:49:22, 45.33s/epoch, accuracy=0.572, loss=1.08, lr=2e-5, val_accuracy=0.577, val_loss=1.08, val_lr=2e-5]  6%|▌         | 62/1000 [47:15<11:46:32, 45.20s/epoch, accuracy=0.572, loss=1.08, lr=2e-5, val_accuracy=0.578, val_loss=1.08, val_lr=2e-5]  6%|▋         | 63/1000 [48:00<11:44:04, 45.08s/epoch, accuracy=0.572, loss=1.08, lr=2e-5, val_accuracy=0.577, val_loss=1.08, val_lr=2e-5]  6%|▋         | 64/1000 [48:45<11:42:11, 45.01s/epoch, accuracy=0.572, loss=1.08, lr=2e-5, val_accuracy=0.578, val_loss=1.08, val_lr=2e-5]  6%|▋         | 65/1000 [49:30<11:40:24, 44.95s/epoch, accuracy=0.572, loss=1.08, lr=2e-5, val_accuracy=0.578, val_loss=1.08, val_lr=2e-5]  7%|▋         | 66/1000 [50:15<11:39:07, 44.91s/epoch, accuracy=0.572, loss=1.08, lr=2e-5, val_accuracy=0.577, val_loss=1.08, val_lr=2e-5]  7%|▋         | 67/1000 [50:59<11:37:54, 44.88s/epoch, accuracy=0.572, loss=1.08, lr=2e-5, val_accuracy=0.576, val_loss=1.08, val_lr=2e-5]  7%|▋         | 68/1000 [51:44<11:36:55, 44.87s/epoch, accuracy=0.572, loss=1.08, lr=2e-5, val_accuracy=0.577, val_loss=1.08, val_lr=2e-5]  7%|▋         | 69/1000 [52:29<11:36:04, 44.86s/epoch, accuracy=0.572, loss=1.08, lr=2e-5, val_accuracy=0.578, val_loss=1.08, val_lr=2e-5]  7%|▋         | 69/1000 [52:29<11:48:16, 45.65s/epoch, accuracy=0.572, loss=1.08, lr=2e-5, val_accuracy=0.578, val_loss=1.08, val_lr=2e-5]
