2024-06-18 13:03:49.315360: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-06-18 13:03:49.316851: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 13:03:49.367683: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 13:03:49.573350: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-06-18 13:03:51.487874: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-06-18 13:03:59.800367: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:282] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
Running train
Model: "functional_1"
┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓
┃ Layer (type)        ┃ Output Shape      ┃    Param # ┃ Connected to      ┃
┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩
│ input_layer         │ (None, 8, 4)      │          0 │ -                 │
│ (InputLayer)        │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ inner_product       │ [(None, 8, 8, 1), │          0 │ input_layer[0][0] │
│ (InnerProduct)      │ (None, 8, 8, 1)]  │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalization │ (None, 8, 8, 1)   │          4 │ inner_product[0]… │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v2 (Lineq2v2) │ (None, 8, 8, 6)   │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ diag_bias_dense     │ (None, 8, 8, 2)   │         16 │ lineq2v2[0][0]    │
│ (DiagBiasDense)     │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ multiply (Multiply) │ (None, 8, 8, 2)   │          0 │ diag_bias_dense[… │
│                     │                   │            │ inner_product[0]… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalizatio… │ (None, 8, 8, 2)   │          8 │ multiply[0][0]    │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v0 (Lineq2v0) │ (None, 4)         │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense (Dense)       │ (None, 5)         │         25 │ lineq2v0[0][0]    │
└─────────────────────┴───────────────────┴────────────┴───────────────────┘
 Total params: 53 (212.00 B)
 Trainable params: 47 (188.00 B)
 Non-trainable params: 6 (24.00 B)
0epoch [00:00, ?epoch/s]  0%|          | 0/1000 [00:00<?, ?epoch/s]/cluster/home/okulseng/.local/lib64/python3.11/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:120: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
  self._warn_if_super_not_called()
  0%|          | 1/1000 [00:18<5:03:58, 18.26s/epoch, accuracy=0.368, loss=1.47, lr=0.002, val_accuracy=0.385, val_loss=1.44, val_lr=0.002]  0%|          | 2/1000 [00:34<4:41:51, 16.94s/epoch, accuracy=0.388, loss=1.44, lr=0.002, val_accuracy=0.384, val_loss=1.44, val_lr=0.002]  0%|          | 3/1000 [00:50<4:35:52, 16.60s/epoch, accuracy=0.39, loss=1.43, lr=0.002, val_accuracy=0.391, val_loss=1.43, val_lr=0.002]   0%|          | 4/1000 [01:06<4:33:47, 16.49s/epoch, accuracy=0.399, loss=1.41, lr=0.002, val_accuracy=0.405, val_loss=1.39, val_lr=0.002]  0%|          | 5/1000 [01:23<4:31:52, 16.39s/epoch, accuracy=0.407, loss=1.37, lr=0.002, val_accuracy=0.405, val_loss=1.35, val_lr=0.002]  1%|          | 6/1000 [01:39<4:29:57, 16.30s/epoch, accuracy=0.41, loss=1.34, lr=0.002, val_accuracy=0.406, val_loss=1.34, val_lr=0.002]   1%|          | 7/1000 [01:55<4:28:36, 16.23s/epoch, accuracy=0.412, loss=1.33, lr=0.002, val_accuracy=0.41, val_loss=1.33, val_lr=0.002]  1%|          | 8/1000 [02:11<4:28:12, 16.22s/epoch, accuracy=0.413, loss=1.33, lr=0.002, val_accuracy=0.409, val_loss=1.33, val_lr=0.002]  1%|          | 9/1000 [02:27<4:27:23, 16.19s/epoch, accuracy=0.414, loss=1.33, lr=0.002, val_accuracy=0.412, val_loss=1.33, val_lr=0.002]  1%|          | 10/1000 [02:43<4:27:08, 16.19s/epoch, accuracy=0.414, loss=1.32, lr=0.002, val_accuracy=0.411, val_loss=1.32, val_lr=0.002]  1%|          | 11/1000 [02:59<4:26:24, 16.16s/epoch, accuracy=0.414, loss=1.32, lr=0.002, val_accuracy=0.412, val_loss=1.32, val_lr=0.002]  1%|          | 12/1000 [03:15<4:25:57, 16.15s/epoch, accuracy=0.414, loss=1.32, lr=0.002, val_accuracy=0.41, val_loss=1.32, val_lr=0.002]   1%|▏         | 13/1000 [03:31<4:25:00, 16.11s/epoch, accuracy=0.414, loss=1.32, lr=0.002, val_accuracy=0.411, val_loss=1.32, val_lr=0.002]  1%|▏         | 14/1000 [03:48<4:24:23, 16.09s/epoch, accuracy=0.414, loss=1.32, lr=0.002, val_accuracy=0.415, val_loss=1.33, val_lr=0.002]  2%|▏         | 15/1000 [04:04<4:23:36, 16.06s/epoch, accuracy=0.414, loss=1.32, lr=0.002, val_accuracy=0.41, val_loss=1.32, val_lr=0.002]   2%|▏         | 16/1000 [04:19<4:22:59, 16.04s/epoch, accuracy=0.414, loss=1.32, lr=0.002, val_accuracy=0.412, val_loss=1.32, val_lr=0.002]  2%|▏         | 17/1000 [04:36<4:24:18, 16.13s/epoch, accuracy=0.415, loss=1.32, lr=0.002, val_accuracy=0.412, val_loss=1.32, val_lr=0.002]  2%|▏         | 18/1000 [04:53<4:27:18, 16.33s/epoch, accuracy=0.414, loss=1.32, lr=0.002, val_accuracy=0.412, val_loss=1.32, val_lr=0.002]  2%|▏         | 19/1000 [05:10<4:31:13, 16.59s/epoch, accuracy=0.415, loss=1.32, lr=0.002, val_accuracy=0.412, val_loss=1.32, val_lr=0.002]  2%|▏         | 20/1000 [05:27<4:33:16, 16.73s/epoch, accuracy=0.415, loss=1.32, lr=0.002, val_accuracy=0.412, val_loss=1.32, val_lr=0.002]  2%|▏         | 21/1000 [05:44<4:34:39, 16.83s/epoch, accuracy=0.415, loss=1.32, lr=0.002, val_accuracy=0.413, val_loss=1.32, val_lr=0.002]  2%|▏         | 22/1000 [06:01<4:35:35, 16.91s/epoch, accuracy=0.415, loss=1.32, lr=0.002, val_accuracy=0.412, val_loss=1.32, val_lr=0.002]  2%|▏         | 23/1000 [06:18<4:35:53, 16.94s/epoch, accuracy=0.415, loss=1.32, lr=0.002, val_accuracy=0.412, val_loss=1.32, val_lr=0.002]  2%|▏         | 24/1000 [06:35<4:35:56, 16.96s/epoch, accuracy=0.415, loss=1.32, lr=0.002, val_accuracy=0.413, val_loss=1.32, val_lr=0.002]  2%|▎         | 25/1000 [06:52<4:35:58, 16.98s/epoch, accuracy=0.415, loss=1.32, lr=0.0002, val_accuracy=0.412, val_loss=1.32, val_lr=0.0002]  3%|▎         | 26/1000 [07:09<4:35:41, 16.98s/epoch, accuracy=0.415, loss=1.32, lr=0.0002, val_accuracy=0.412, val_loss=1.32, val_lr=0.0002]  3%|▎         | 27/1000 [07:26<4:35:10, 16.97s/epoch, accuracy=0.415, loss=1.32, lr=0.0002, val_accuracy=0.412, val_loss=1.32, val_lr=0.0002]  3%|▎         | 28/1000 [07:43<4:35:02, 16.98s/epoch, accuracy=0.415, loss=1.32, lr=0.0002, val_accuracy=0.412, val_loss=1.32, val_lr=0.0002]  3%|▎         | 29/1000 [08:00<4:34:40, 16.97s/epoch, accuracy=0.415, loss=1.32, lr=0.0002, val_accuracy=0.412, val_loss=1.32, val_lr=0.0002]  3%|▎         | 30/1000 [08:17<4:35:03, 17.01s/epoch, accuracy=0.415, loss=1.32, lr=0.0002, val_accuracy=0.412, val_loss=1.32, val_lr=0.0002]  3%|▎         | 31/1000 [08:34<4:36:13, 17.10s/epoch, accuracy=0.415, loss=1.32, lr=0.0002, val_accuracy=0.412, val_loss=1.32, val_lr=0.0002]  3%|▎         | 32/1000 [08:52<4:37:49, 17.22s/epoch, accuracy=0.415, loss=1.32, lr=0.0002, val_accuracy=0.413, val_loss=1.32, val_lr=0.0002]  3%|▎         | 33/1000 [09:09<4:38:55, 17.31s/epoch, accuracy=0.415, loss=1.32, lr=0.0002, val_accuracy=0.413, val_loss=1.32, val_lr=0.0002]  3%|▎         | 34/1000 [09:27<4:39:16, 17.35s/epoch, accuracy=0.415, loss=1.32, lr=0.0002, val_accuracy=0.413, val_loss=1.32, val_lr=0.0002]  3%|▎         | 34/1000 [09:27<4:28:39, 16.69s/epoch, accuracy=0.415, loss=1.32, lr=0.0002, val_accuracy=0.413, val_loss=1.32, val_lr=0.0002]
