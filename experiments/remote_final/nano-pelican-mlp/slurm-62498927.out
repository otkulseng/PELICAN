2024-06-18 13:09:55.637140: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-06-18 13:09:55.637442: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 13:09:55.640503: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-18 13:09:55.674623: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-06-18 13:09:57.235084: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-06-18 13:10:04.117733: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:282] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
Running train
Model: "functional_1"
┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓
┃ Layer (type)        ┃ Output Shape      ┃    Param # ┃ Connected to      ┃
┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩
│ input_layer         │ (None, 16, 4)     │          0 │ -                 │
│ (InputLayer)        │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ inner_product       │ [(None, 16, 16,   │          0 │ input_layer[0][0] │
│ (InnerProduct)      │ 1), (None, 16,    │            │                   │
│                     │ 16, 1)]           │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalization │ (None, 16, 16, 1) │          4 │ inner_product[0]… │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v2 (Lineq2v2) │ (None, 16, 16, 6) │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ diag_bias_dense     │ (None, 16, 16, 2) │         16 │ lineq2v2[0][0]    │
│ (DiagBiasDense)     │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ multiply (Multiply) │ (None, 16, 16, 2) │          0 │ diag_bias_dense[… │
│                     │                   │            │ inner_product[0]… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalizatio… │ (None, 16, 16, 2) │          8 │ multiply[0][0]    │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v0 (Lineq2v0) │ (None, 4)         │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense (Dense)       │ (None, 5)         │         25 │ lineq2v0[0][0]    │
└─────────────────────┴───────────────────┴────────────┴───────────────────┘
 Total params: 53 (212.00 B)
 Trainable params: 47 (188.00 B)
 Non-trainable params: 6 (24.00 B)
0epoch [00:00, ?epoch/s]  0%|          | 0/1000 [00:00<?, ?epoch/s]/cluster/home/okulseng/.local/lib64/python3.11/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:120: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
  self._warn_if_super_not_called()
  0%|          | 1/1000 [00:37<10:30:52, 37.89s/epoch, accuracy=0.472, loss=1.29, lr=0.002, val_accuracy=0.509, val_loss=1.2, val_lr=0.002]  0%|          | 2/1000 [01:13<10:12:43, 36.84s/epoch, accuracy=0.507, loss=1.19, lr=0.002, val_accuracy=0.509, val_loss=1.19, val_lr=0.002]  0%|          | 3/1000 [01:50<10:07:42, 36.57s/epoch, accuracy=0.511, loss=1.18, lr=0.002, val_accuracy=0.513, val_loss=1.18, val_lr=0.002]  0%|          | 4/1000 [02:26<10:06:59, 36.57s/epoch, accuracy=0.517, loss=1.17, lr=0.002, val_accuracy=0.52, val_loss=1.17, val_lr=0.002]   0%|          | 5/1000 [03:03<10:04:24, 36.45s/epoch, accuracy=0.523, loss=1.16, lr=0.002, val_accuracy=0.527, val_loss=1.16, val_lr=0.002]  1%|          | 6/1000 [03:39<10:03:33, 36.43s/epoch, accuracy=0.529, loss=1.15, lr=0.002, val_accuracy=0.533, val_loss=1.15, val_lr=0.002]  1%|          | 7/1000 [04:16<10:04:24, 36.52s/epoch, accuracy=0.534, loss=1.15, lr=0.002, val_accuracy=0.537, val_loss=1.14, val_lr=0.002]  1%|          | 8/1000 [04:52<10:04:21, 36.55s/epoch, accuracy=0.538, loss=1.14, lr=0.002, val_accuracy=0.544, val_loss=1.14, val_lr=0.002]  1%|          | 9/1000 [05:29<10:04:07, 36.58s/epoch, accuracy=0.54, loss=1.14, lr=0.002, val_accuracy=0.547, val_loss=1.14, val_lr=0.002]   1%|          | 10/1000 [06:06<10:03:41, 36.59s/epoch, accuracy=0.542, loss=1.14, lr=0.002, val_accuracy=0.543, val_loss=1.13, val_lr=0.002]  1%|          | 11/1000 [06:42<10:04:16, 36.66s/epoch, accuracy=0.543, loss=1.14, lr=0.002, val_accuracy=0.546, val_loss=1.13, val_lr=0.002]  1%|          | 12/1000 [07:19<10:03:43, 36.66s/epoch, accuracy=0.543, loss=1.13, lr=0.002, val_accuracy=0.549, val_loss=1.13, val_lr=0.002]  1%|▏         | 13/1000 [07:56<10:02:55, 36.65s/epoch, accuracy=0.544, loss=1.13, lr=0.002, val_accuracy=0.544, val_loss=1.13, val_lr=0.002]  1%|▏         | 14/1000 [08:32<10:02:53, 36.69s/epoch, accuracy=0.545, loss=1.13, lr=0.002, val_accuracy=0.549, val_loss=1.13, val_lr=0.002]  2%|▏         | 15/1000 [09:08<9:58:10, 36.44s/epoch, accuracy=0.546, loss=1.13, lr=0.002, val_accuracy=0.547, val_loss=1.13, val_lr=0.002]   2%|▏         | 16/1000 [09:44<9:54:11, 36.23s/epoch, accuracy=0.546, loss=1.13, lr=0.002, val_accuracy=0.545, val_loss=1.13, val_lr=0.002]  2%|▏         | 17/1000 [10:20<9:51:23, 36.10s/epoch, accuracy=0.547, loss=1.13, lr=0.002, val_accuracy=0.548, val_loss=1.13, val_lr=0.002]  2%|▏         | 18/1000 [10:56<9:49:10, 36.00s/epoch, accuracy=0.547, loss=1.13, lr=0.002, val_accuracy=0.549, val_loss=1.13, val_lr=0.002]  2%|▏         | 19/1000 [11:31<9:47:51, 35.95s/epoch, accuracy=0.548, loss=1.13, lr=0.002, val_accuracy=0.547, val_loss=1.12, val_lr=0.002]  2%|▏         | 20/1000 [12:07<9:45:45, 35.86s/epoch, accuracy=0.547, loss=1.12, lr=0.002, val_accuracy=0.55, val_loss=1.12, val_lr=0.002]   2%|▏         | 21/1000 [12:43<9:44:17, 35.81s/epoch, accuracy=0.547, loss=1.12, lr=0.002, val_accuracy=0.551, val_loss=1.12, val_lr=0.002]  2%|▏         | 22/1000 [13:19<9:43:58, 35.83s/epoch, accuracy=0.547, loss=1.12, lr=0.002, val_accuracy=0.552, val_loss=1.12, val_lr=0.002]  2%|▏         | 23/1000 [13:55<9:44:41, 35.91s/epoch, accuracy=0.547, loss=1.12, lr=0.002, val_accuracy=0.55, val_loss=1.12, val_lr=0.002]   2%|▏         | 24/1000 [14:31<9:44:57, 35.96s/epoch, accuracy=0.546, loss=1.12, lr=0.002, val_accuracy=0.543, val_loss=1.12, val_lr=0.002]  2%|▎         | 25/1000 [15:07<9:44:32, 35.97s/epoch, accuracy=0.546, loss=1.12, lr=0.002, val_accuracy=0.549, val_loss=1.12, val_lr=0.002]  3%|▎         | 26/1000 [15:43<9:44:34, 36.01s/epoch, accuracy=0.546, loss=1.12, lr=0.002, val_accuracy=0.546, val_loss=1.12, val_lr=0.002]  3%|▎         | 27/1000 [16:19<9:44:07, 36.02s/epoch, accuracy=0.545, loss=1.12, lr=0.002, val_accuracy=0.548, val_loss=1.12, val_lr=0.002]  3%|▎         | 28/1000 [16:55<9:43:42, 36.03s/epoch, accuracy=0.545, loss=1.12, lr=0.002, val_accuracy=0.55, val_loss=1.12, val_lr=0.002]   3%|▎         | 29/1000 [17:31<9:42:58, 36.02s/epoch, accuracy=0.544, loss=1.12, lr=0.002, val_accuracy=0.544, val_loss=1.11, val_lr=0.002]  3%|▎         | 30/1000 [18:07<9:42:59, 36.06s/epoch, accuracy=0.544, loss=1.12, lr=0.002, val_accuracy=0.545, val_loss=1.11, val_lr=0.002]  3%|▎         | 31/1000 [18:43<9:42:58, 36.10s/epoch, accuracy=0.543, loss=1.12, lr=0.002, val_accuracy=0.545, val_loss=1.12, val_lr=0.002]  3%|▎         | 32/1000 [19:19<9:42:17, 36.09s/epoch, accuracy=0.543, loss=1.12, lr=0.002, val_accuracy=0.548, val_loss=1.12, val_lr=0.002]  3%|▎         | 33/1000 [20:00<10:05:44, 37.58s/epoch, accuracy=0.545, loss=1.12, lr=0.0002, val_accuracy=0.547, val_loss=1.11, val_lr=0.0002]  3%|▎         | 34/1000 [20:37<9:58:09, 37.15s/epoch, accuracy=0.545, loss=1.12, lr=0.0002, val_accuracy=0.543, val_loss=1.11, val_lr=0.0002]   4%|▎         | 35/1000 [21:13<9:52:56, 36.87s/epoch, accuracy=0.544, loss=1.12, lr=0.0002, val_accuracy=0.544, val_loss=1.11, val_lr=0.0002]  4%|▎         | 36/1000 [21:49<9:49:14, 36.67s/epoch, accuracy=0.545, loss=1.12, lr=0.0002, val_accuracy=0.545, val_loss=1.11, val_lr=0.0002]  4%|▎         | 37/1000 [22:25<9:45:54, 36.51s/epoch, accuracy=0.544, loss=1.12, lr=0.0002, val_accuracy=0.546, val_loss=1.11, val_lr=0.0002]  4%|▍         | 38/1000 [23:01<9:43:46, 36.41s/epoch, accuracy=0.545, loss=1.12, lr=0.0002, val_accuracy=0.545, val_loss=1.11, val_lr=0.0002]  4%|▍         | 39/1000 [23:38<9:42:17, 36.36s/epoch, accuracy=0.544, loss=1.12, lr=0.0002, val_accuracy=0.545, val_loss=1.11, val_lr=0.0002]  4%|▍         | 40/1000 [24:14<9:40:42, 36.29s/epoch, accuracy=0.544, loss=1.12, lr=0.0002, val_accuracy=0.546, val_loss=1.11, val_lr=0.0002]  4%|▍         | 41/1000 [24:50<9:39:38, 36.27s/epoch, accuracy=0.544, loss=1.12, lr=0.0002, val_accuracy=0.545, val_loss=1.11, val_lr=0.0002]  4%|▍         | 42/1000 [25:26<9:38:09, 36.21s/epoch, accuracy=0.544, loss=1.12, lr=0.0002, val_accuracy=0.545, val_loss=1.11, val_lr=0.0002]  4%|▍         | 42/1000 [25:26<9:40:18, 36.35s/epoch, accuracy=0.544, loss=1.12, lr=0.0002, val_accuracy=0.545, val_loss=1.11, val_lr=0.0002]
