2024-06-11 00:41:07.855463: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-11 00:41:08.015185: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-11 00:41:08.633536: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-06-11 00:41:12.488820: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-06-11 00:41:31.729642: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:282] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
Running train
Model: "functional_1"
┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓
┃ Layer (type)        ┃ Output Shape      ┃    Param # ┃ Connected to      ┃
┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩
│ input_layer         │ (None, 32, 4)     │          0 │ -                 │
│ (InputLayer)        │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ inner_product       │ [(None, 32, 32,   │          0 │ input_layer[0][0] │
│ (InnerProduct)      │ 1), (None, 32,    │            │                   │
│                     │ 32, 1)]           │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalization │ (None, 32, 32, 1) │          4 │ inner_product[0]… │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v2 (Lineq2v2) │ (None, 32, 32, 6) │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ diag_bias_dense     │ (None, 32, 32, 8) │         64 │ lineq2v2[0][0]    │
│ (DiagBiasDense)     │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ multiply (Multiply) │ (None, 32, 32, 8) │          0 │ diag_bias_dense[… │
│                     │                   │            │ inner_product[0]… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ batch_normalizatio… │ (None, 32, 32, 8) │         32 │ multiply[0][0]    │
│ (BatchNormalizatio… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ lineq2v0 (Lineq2v0) │ (None, 16)        │          0 │ batch_normalizat… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense (Dense)       │ (None, 5)         │         85 │ lineq2v0[0][0]    │
└─────────────────────┴───────────────────┴────────────┴───────────────────┘
 Total params: 185 (740.00 B)
 Trainable params: 167 (668.00 B)
 Non-trainable params: 18 (72.00 B)
0epoch [00:00, ?epoch/s]  0%|          | 0/1000 [00:00<?, ?epoch/s]/cluster/home/okulseng/.local/lib64/python3.11/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:120: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
  self._warn_if_super_not_called()
  0%|          | 1/1000 [07:06<118:22:36, 426.58s/epoch, accuracy=0.612, loss=1.08, lr=0.002, val_accuracy=0.657, val_loss=0.969, val_lr=0.002]  0%|          | 2/1000 [14:10<117:52:21, 425.19s/epoch, accuracy=0.651, loss=0.968, lr=0.002, val_accuracy=0.659, val_loss=0.965, val_lr=0.002]  0%|          | 3/1000 [21:15<117:38:08, 424.76s/epoch, accuracy=0.652, loss=0.962, lr=0.002, val_accuracy=0.66, val_loss=0.953, val_lr=0.002]   0%|          | 4/1000 [28:17<117:17:02, 423.92s/epoch, accuracy=0.654, loss=0.956, lr=0.002, val_accuracy=0.659, val_loss=0.95, val_lr=0.002]  0%|          | 5/1000 [35:20<117:03:20, 423.52s/epoch, accuracy=0.655, loss=0.951, lr=0.002, val_accuracy=0.661, val_loss=0.944, val_lr=0.002]  1%|          | 6/1000 [42:20<116:37:54, 422.41s/epoch, accuracy=0.656, loss=0.945, lr=0.002, val_accuracy=0.656, val_loss=0.943, val_lr=0.002]  1%|          | 7/1000 [49:19<116:08:48, 421.08s/epoch, accuracy=0.657, loss=0.94, lr=0.002, val_accuracy=0.656, val_loss=0.937, val_lr=0.002]   1%|          | 8/1000 [56:17<115:49:41, 420.34s/epoch, accuracy=0.658, loss=0.935, lr=0.002, val_accuracy=0.665, val_loss=0.92, val_lr=0.002]  1%|          | 9/1000 [1:03:23<116:09:42, 421.98s/epoch, accuracy=0.658, loss=0.929, lr=0.002, val_accuracy=0.665, val_loss=0.913, val_lr=0.002]  1%|          | 10/1000 [1:10:33<116:44:30, 424.52s/epoch, accuracy=0.66, loss=0.923, lr=0.002, val_accuracy=0.662, val_loss=0.914, val_lr=0.002]  1%|          | 11/1000 [1:17:35<116:22:06, 423.59s/epoch, accuracy=0.66, loss=0.92, lr=0.002, val_accuracy=0.666, val_loss=0.907, val_lr=0.002]   1%|          | 12/1000 [1:24:45<116:48:54, 425.64s/epoch, accuracy=0.662, loss=0.917, lr=0.002, val_accuracy=0.668, val_loss=0.907, val_lr=0.002]  1%|▏         | 13/1000 [1:31:53<116:55:04, 426.45s/epoch, accuracy=0.663, loss=0.916, lr=0.002, val_accuracy=0.669, val_loss=0.905, val_lr=0.002]  1%|▏         | 14/1000 [1:39:00<116:47:32, 426.42s/epoch, accuracy=0.662, loss=0.914, lr=0.002, val_accuracy=0.668, val_loss=0.911, val_lr=0.002]  2%|▏         | 15/1000 [1:45:50<115:22:46, 421.69s/epoch, accuracy=0.664, loss=0.913, lr=0.002, val_accuracy=0.669, val_loss=0.903, val_lr=0.002]  2%|▏         | 16/1000 [1:52:33<113:40:03, 415.86s/epoch, accuracy=0.664, loss=0.912, lr=0.002, val_accuracy=0.668, val_loss=0.902, val_lr=0.002]  2%|▏         | 17/1000 [1:58:42<109:44:01, 401.87s/epoch, accuracy=0.664, loss=0.911, lr=0.002, val_accuracy=0.666, val_loss=0.915, val_lr=0.002]  2%|▏         | 18/1000 [2:04:49<106:45:36, 391.38s/epoch, accuracy=0.665, loss=0.91, lr=0.002, val_accuracy=0.666, val_loss=0.904, val_lr=0.002]   2%|▏         | 19/1000 [2:10:57<104:45:28, 384.43s/epoch, accuracy=0.666, loss=0.909, lr=0.002, val_accuracy=0.666, val_loss=0.901, val_lr=0.002]  2%|▏         | 20/1000 [2:17:06<103:21:12, 379.67s/epoch, accuracy=0.665, loss=0.909, lr=0.002, val_accuracy=0.673, val_loss=0.896, val_lr=0.002]  2%|▏         | 21/1000 [2:23:28<103:25:59, 380.35s/epoch, accuracy=0.666, loss=0.908, lr=0.002, val_accuracy=0.672, val_loss=0.902, val_lr=0.002]  2%|▏         | 22/1000 [2:29:19<100:57:54, 371.65s/epoch, accuracy=0.666, loss=0.907, lr=0.002, val_accuracy=0.673, val_loss=0.911, val_lr=0.002]  2%|▏         | 23/1000 [2:35:04<98:39:36, 363.54s/epoch, accuracy=0.667, loss=0.907, lr=0.002, val_accuracy=0.669, val_loss=0.912, val_lr=0.002]   2%|▏         | 24/1000 [2:40:49<97:06:49, 358.21s/epoch, accuracy=0.667, loss=0.906, lr=0.002, val_accuracy=0.667, val_loss=0.902, val_lr=0.002]  2%|▎         | 25/1000 [2:46:35<95:56:53, 354.27s/epoch, accuracy=0.667, loss=0.905, lr=0.002, val_accuracy=0.671, val_loss=0.895, val_lr=0.002]  3%|▎         | 26/1000 [2:52:20<95:07:08, 351.57s/epoch, accuracy=0.667, loss=0.905, lr=0.002, val_accuracy=0.675, val_loss=0.894, val_lr=0.002]  3%|▎         | 27/1000 [2:58:06<94:34:14, 349.90s/epoch, accuracy=0.668, loss=0.904, lr=0.002, val_accuracy=0.664, val_loss=0.902, val_lr=0.002]  3%|▎         | 28/1000 [3:03:50<94:01:43, 348.25s/epoch, accuracy=0.668, loss=0.904, lr=0.002, val_accuracy=0.676, val_loss=0.891, val_lr=0.002]  3%|▎         | 29/1000 [3:09:36<93:41:58, 347.39s/epoch, accuracy=0.669, loss=0.903, lr=0.002, val_accuracy=0.656, val_loss=0.91, val_lr=0.002]   3%|▎         | 30/1000 [3:15:21<93:25:48, 346.75s/epoch, accuracy=0.669, loss=0.903, lr=0.002, val_accuracy=0.676, val_loss=0.894, val_lr=0.002]  3%|▎         | 31/1000 [3:21:06<93:14:21, 346.40s/epoch, accuracy=0.669, loss=0.902, lr=0.002, val_accuracy=0.672, val_loss=0.901, val_lr=0.002]  3%|▎         | 32/1000 [3:26:50<92:56:49, 345.67s/epoch, accuracy=0.669, loss=0.902, lr=0.002, val_accuracy=0.677, val_loss=0.895, val_lr=0.002]  3%|▎         | 33/1000 [3:32:35<92:47:07, 345.43s/epoch, accuracy=0.67, loss=0.901, lr=0.002, val_accuracy=0.672, val_loss=0.899, val_lr=0.002]   3%|▎         | 34/1000 [3:38:20<92:38:15, 345.23s/epoch, accuracy=0.67, loss=0.9, lr=0.002, val_accuracy=0.672, val_loss=0.898, val_lr=0.002]    4%|▎         | 35/1000 [3:44:05<92:32:22, 345.23s/epoch, accuracy=0.67, loss=0.901, lr=0.002, val_accuracy=0.676, val_loss=0.888, val_lr=0.002]  4%|▎         | 36/1000 [3:49:50<92:23:11, 345.01s/epoch, accuracy=0.67, loss=0.901, lr=0.002, val_accuracy=0.674, val_loss=0.893, val_lr=0.002]  4%|▎         | 37/1000 [3:55:35<92:20:19, 345.19s/epoch, accuracy=0.67, loss=0.9, lr=0.002, val_accuracy=0.677, val_loss=0.886, val_lr=0.002]    4%|▍         | 38/1000 [4:01:21<92:16:05, 345.29s/epoch, accuracy=0.67, loss=0.899, lr=0.002, val_accuracy=0.679, val_loss=0.887, val_lr=0.002]  4%|▍         | 39/1000 [4:07:02<91:50:51, 344.07s/epoch, accuracy=0.67, loss=0.9, lr=0.002, val_accuracy=0.676, val_loss=0.888, val_lr=0.002]    4%|▍         | 40/1000 [4:12:48<91:51:56, 344.50s/epoch, accuracy=0.671, loss=0.899, lr=0.002, val_accuracy=0.68, val_loss=0.888, val_lr=0.002]  4%|▍         | 41/1000 [4:18:57<93:43:39, 351.85s/epoch, accuracy=0.671, loss=0.899, lr=0.002, val_accuracy=0.678, val_loss=0.888, val_lr=0.002]  4%|▍         | 42/1000 [4:25:04<94:54:08, 356.63s/epoch, accuracy=0.671, loss=0.899, lr=0.002, val_accuracy=0.68, val_loss=0.884, val_lr=0.002]   4%|▍         | 43/1000 [4:31:13<95:43:44, 360.11s/epoch, accuracy=0.672, loss=0.898, lr=0.002, val_accuracy=0.676, val_loss=0.892, val_lr=0.002]  4%|▍         | 44/1000 [4:37:15<95:49:10, 360.83s/epoch, accuracy=0.671, loss=0.898, lr=0.002, val_accuracy=0.681, val_loss=0.884, val_lr=0.002]  4%|▍         | 45/1000 [4:43:22<96:11:33, 362.61s/epoch, accuracy=0.671, loss=0.898, lr=0.002, val_accuracy=0.672, val_loss=0.899, val_lr=0.002]  5%|▍         | 46/1000 [4:49:29<96:28:54, 364.08s/epoch, accuracy=0.672, loss=0.898, lr=0.002, val_accuracy=0.674, val_loss=0.9, val_lr=0.002]    5%|▍         | 47/1000 [4:55:38<96:42:51, 365.34s/epoch, accuracy=0.671, loss=0.898, lr=0.002, val_accuracy=0.68, val_loss=0.887, val_lr=0.002]  5%|▍         | 48/1000 [5:01:46<96:48:59, 366.11s/epoch, accuracy=0.672, loss=0.897, lr=0.002, val_accuracy=0.672, val_loss=0.892, val_lr=0.002]  5%|▍         | 49/1000 [5:07:54<96:54:58, 366.88s/epoch, accuracy=0.672, loss=0.897, lr=0.002, val_accuracy=0.67, val_loss=0.896, val_lr=0.002]   5%|▌         | 50/1000 [5:14:02<96:51:51, 367.06s/epoch, accuracy=0.672, loss=0.897, lr=0.002, val_accuracy=0.677, val_loss=0.889, val_lr=0.002]  5%|▌         | 51/1000 [5:20:09<96:46:36, 367.12s/epoch, accuracy=0.671, loss=0.897, lr=0.002, val_accuracy=0.676, val_loss=0.888, val_lr=0.002]  5%|▌         | 52/1000 [5:26:17<96:43:54, 367.34s/epoch, accuracy=0.672, loss=0.897, lr=0.002, val_accuracy=0.677, val_loss=0.892, val_lr=0.002]  5%|▌         | 53/1000 [5:32:25<96:40:58, 367.54s/epoch, accuracy=0.672, loss=0.896, lr=0.002, val_accuracy=0.668, val_loss=0.91, val_lr=0.002]   5%|▌         | 54/1000 [5:38:32<96:34:33, 367.52s/epoch, accuracy=0.671, loss=0.897, lr=0.002, val_accuracy=0.679, val_loss=0.885, val_lr=0.002]  6%|▌         | 55/1000 [5:44:40<96:30:51, 367.67s/epoch, accuracy=0.674, loss=0.892, lr=0.0002, val_accuracy=0.68, val_loss=0.881, val_lr=0.0002]  6%|▌         | 56/1000 [5:50:48<96:24:16, 367.64s/epoch, accuracy=0.674, loss=0.892, lr=0.0002, val_accuracy=0.681, val_loss=0.881, val_lr=0.0002]  6%|▌         | 57/1000 [5:56:55<96:16:19, 367.53s/epoch, accuracy=0.674, loss=0.892, lr=0.0002, val_accuracy=0.681, val_loss=0.881, val_lr=0.0002]  6%|▌         | 58/1000 [6:03:36<98:44:47, 377.38s/epoch, accuracy=0.675, loss=0.892, lr=0.0002, val_accuracy=0.681, val_loss=0.88, val_lr=0.0002]   6%|▌         | 59/1000 [6:10:16<100:25:47, 384.22s/epoch, accuracy=0.674, loss=0.892, lr=0.0002, val_accuracy=0.681, val_loss=0.881, val_lr=0.0002]  6%|▌         | 60/1000 [6:16:52<101:14:25, 387.73s/epoch, accuracy=0.675, loss=0.892, lr=0.0002, val_accuracy=0.682, val_loss=0.88, val_lr=0.0002]   6%|▌         | 61/1000 [6:23:22<101:20:13, 388.51s/epoch, accuracy=0.674, loss=0.892, lr=0.0002, val_accuracy=0.68, val_loss=0.881, val_lr=0.0002]  6%|▌         | 62/1000 [6:29:30<99:37:31, 382.36s/epoch, accuracy=0.674, loss=0.892, lr=0.0002, val_accuracy=0.681, val_loss=0.88, val_lr=0.0002]   6%|▋         | 63/1000 [6:35:38<98:22:01, 377.93s/epoch, accuracy=0.674, loss=0.892, lr=0.0002, val_accuracy=0.68, val_loss=0.881, val_lr=0.0002]  6%|▋         | 64/1000 [6:41:43<97:15:14, 374.05s/epoch, accuracy=0.674, loss=0.892, lr=0.0002, val_accuracy=0.681, val_loss=0.881, val_lr=0.0002]  6%|▋         | 65/1000 [6:48:11<98:13:45, 378.21s/epoch, accuracy=0.675, loss=0.891, lr=0.0002, val_accuracy=0.68, val_loss=0.881, val_lr=0.0002]   7%|▋         | 66/1000 [6:54:32<98:22:52, 379.20s/epoch, accuracy=0.675, loss=0.892, lr=0.0002, val_accuracy=0.681, val_loss=0.88, val_lr=0.0002]  7%|▋         | 67/1000 [7:00:51<98:14:17, 379.05s/epoch, accuracy=0.674, loss=0.892, lr=0.0002, val_accuracy=0.68, val_loss=0.88, val_lr=0.0002]   7%|▋         | 68/1000 [7:07:00<97:24:01, 376.22s/epoch, accuracy=0.675, loss=0.891, lr=0.0002, val_accuracy=0.678, val_loss=0.883, val_lr=0.0002]  7%|▋         | 69/1000 [7:13:09<96:42:54, 373.98s/epoch, accuracy=0.674, loss=0.891, lr=0.0002, val_accuracy=0.679, val_loss=0.881, val_lr=0.0002]  7%|▋         | 70/1000 [7:19:18<96:12:15, 372.40s/epoch, accuracy=0.674, loss=0.891, lr=0.0002, val_accuracy=0.679, val_loss=0.881, val_lr=0.0002]  7%|▋         | 71/1000 [7:25:27<95:50:44, 371.41s/epoch, accuracy=0.675, loss=0.891, lr=2e-5, val_accuracy=0.68, val_loss=0.88, val_lr=2e-5]        7%|▋         | 72/1000 [7:31:35<95:29:55, 370.47s/epoch, accuracy=0.675, loss=0.891, lr=2e-5, val_accuracy=0.681, val_loss=0.879, val_lr=2e-5]  7%|▋         | 73/1000 [7:37:43<95:12:16, 369.73s/epoch, accuracy=0.675, loss=0.891, lr=2e-5, val_accuracy=0.68, val_loss=0.88, val_lr=2e-5]    7%|▋         | 74/1000 [7:43:51<94:59:09, 369.28s/epoch, accuracy=0.675, loss=0.891, lr=2e-5, val_accuracy=0.681, val_loss=0.88, val_lr=2e-5]  8%|▊         | 75/1000 [7:50:00<94:47:43, 368.93s/epoch, accuracy=0.675, loss=0.891, lr=2e-5, val_accuracy=0.68, val_loss=0.88, val_lr=2e-5]   8%|▊         | 76/1000 [7:56:07<94:34:44, 368.49s/epoch, accuracy=0.675, loss=0.891, lr=2e-5, val_accuracy=0.68, val_loss=0.88, val_lr=2e-5]  8%|▊         | 77/1000 [8:02:15<94:25:55, 368.32s/epoch, accuracy=0.675, loss=0.891, lr=2e-5, val_accuracy=0.681, val_loss=0.88, val_lr=2e-5]  8%|▊         | 78/1000 [8:08:23<94:17:22, 368.16s/epoch, accuracy=0.675, loss=0.891, lr=2e-5, val_accuracy=0.68, val_loss=0.88, val_lr=2e-5]   8%|▊         | 79/1000 [8:14:31<94:11:20, 368.17s/epoch, accuracy=0.675, loss=0.891, lr=2e-5, val_accuracy=0.679, val_loss=0.881, val_lr=2e-5]  8%|▊         | 80/1000 [8:20:39<94:05:27, 368.18s/epoch, accuracy=0.675, loss=0.891, lr=2e-5, val_accuracy=0.681, val_loss=0.879, val_lr=2e-5]  8%|▊         | 80/1000 [8:20:39<95:57:35, 375.50s/epoch, accuracy=0.675, loss=0.891, lr=2e-5, val_accuracy=0.681, val_loss=0.879, val_lr=2e-5]
