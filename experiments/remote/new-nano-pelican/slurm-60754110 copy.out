2024-05-29 20:14:17.145340: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-05-29 20:14:17.200084: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-05-29 20:14:17.447038: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-05-29 20:14:19.692067: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-05-29 20:14:28.419823: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:282] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
Running train
Model: "functional_1"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃ Layer (type)                    ┃ Output Shape           ┃       Param # ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩
│ input_layer (InputLayer)        │ (None, 32, 4)          │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ inner_product (InnerProduct)    │ (None, 32, 32, 1)      │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ lineq2v2 (Lineq2v2)             │ (None, 32, 32, 7)      │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense (Dense)                   │ (None, 32, 32, 3)      │            24 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ lineq2v0 (Lineq2v0)             │ (None, 6)              │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_1 (Dense)                 │ (None, 64)             │           448 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_2 (Dense)                 │ (None, 64)             │         4,160 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_3 (Dense)                 │ (None, 32)             │         2,080 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_4 (Dense)                 │ (None, 5)              │           165 │
└─────────────────────────────────┴────────────────────────┴───────────────┘
 Total params: 6,877 (26.86 KB)
 Trainable params: 6,877 (26.86 KB)
 Non-trainable params: 0 (0.00 B)
0epoch [00:00, ?epoch/s]  0%|          | 0/1000 [00:00<?, ?epoch/s]/cluster/home/okulseng/.local/lib64/python3.11/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:120: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
  self._warn_if_super_not_called()
  0%|          | 1/1000 [01:53<31:30:56, 113.57s/epoch, accuracy=0.675, loss=0.897, lr=0.01, val_accuracy=0.698, val_loss=0.845, val_lr=0.01]  0%|          | 2/1000 [03:30<28:44:50, 103.70s/epoch, accuracy=0.701, loss=0.832, lr=0.01, val_accuracy=0.706, val_loss=0.82, val_lr=0.01]   0%|          | 3/1000 [05:06<27:48:25, 100.41s/epoch, accuracy=0.704, loss=0.824, lr=0.01, val_accuracy=0.704, val_loss=0.825, val_lr=0.01]  0%|          | 4/1000 [06:43<27:21:23, 98.88s/epoch, accuracy=0.705, loss=0.819, lr=0.01, val_accuracy=0.706, val_loss=0.82, val_lr=0.01]    0%|          | 5/1000 [08:20<27:06:34, 98.09s/epoch, accuracy=0.706, loss=0.817, lr=0.01, val_accuracy=0.701, val_loss=0.833, val_lr=0.01]  1%|          | 6/1000 [09:56<26:55:56, 97.54s/epoch, accuracy=0.707, loss=0.814, lr=0.01, val_accuracy=0.709, val_loss=0.807, val_lr=0.01]  1%|          | 7/1000 [11:33<26:50:06, 97.29s/epoch, accuracy=0.708, loss=0.812, lr=0.01, val_accuracy=0.709, val_loss=0.803, val_lr=0.01]  1%|          | 8/1000 [13:10<26:45:44, 97.12s/epoch, accuracy=0.708, loss=0.811, lr=0.01, val_accuracy=0.709, val_loss=0.808, val_lr=0.01]  1%|          | 9/1000 [14:46<26:40:28, 96.90s/epoch, accuracy=0.708, loss=0.81, lr=0.01, val_accuracy=0.711, val_loss=0.805, val_lr=0.01]   1%|          | 10/1000 [16:23<26:37:54, 96.84s/epoch, accuracy=0.708, loss=0.809, lr=0.01, val_accuracy=0.708, val_loss=0.806, val_lr=0.01]  1%|          | 11/1000 [17:59<26:35:00, 96.77s/epoch, accuracy=0.709, loss=0.808, lr=0.01, val_accuracy=0.71, val_loss=0.802, val_lr=0.01]   1%|          | 12/1000 [19:36<26:32:35, 96.72s/epoch, accuracy=0.708, loss=0.808, lr=0.01, val_accuracy=0.696, val_loss=0.837, val_lr=0.01]  1%|▏         | 13/1000 [21:12<26:30:01, 96.66s/epoch, accuracy=0.709, loss=0.808, lr=0.01, val_accuracy=0.711, val_loss=0.801, val_lr=0.01]  1%|▏         | 14/1000 [22:49<26:27:11, 96.58s/epoch, accuracy=0.709, loss=0.806, lr=0.01, val_accuracy=0.711, val_loss=0.802, val_lr=0.01]  2%|▏         | 15/1000 [24:25<26:25:53, 96.60s/epoch, accuracy=0.709, loss=0.807, lr=0.01, val_accuracy=0.709, val_loss=0.801, val_lr=0.01]  2%|▏         | 16/1000 [26:02<26:23:57, 96.58s/epoch, accuracy=0.709, loss=0.806, lr=0.01, val_accuracy=0.711, val_loss=0.8, val_lr=0.01]    2%|▏         | 17/1000 [27:39<26:22:46, 96.61s/epoch, accuracy=0.71, loss=0.806, lr=0.01, val_accuracy=0.709, val_loss=0.81, val_lr=0.01]  2%|▏         | 18/1000 [29:16<26:22:23, 96.68s/epoch, accuracy=0.71, loss=0.805, lr=0.01, val_accuracy=0.713, val_loss=0.799, val_lr=0.01]  2%|▏         | 19/1000 [30:52<26:19:30, 96.61s/epoch, accuracy=0.71, loss=0.804, lr=0.01, val_accuracy=0.711, val_loss=0.801, val_lr=0.01]  2%|▏         | 20/1000 [32:29<26:19:07, 96.68s/epoch, accuracy=0.71, loss=0.804, lr=0.01, val_accuracy=0.712, val_loss=0.8, val_lr=0.01]    2%|▏         | 21/1000 [34:06<26:18:43, 96.76s/epoch, accuracy=0.71, loss=0.804, lr=0.01, val_accuracy=0.711, val_loss=0.799, val_lr=0.01]  2%|▏         | 22/1000 [35:43<26:17:15, 96.76s/epoch, accuracy=0.71, loss=0.804, lr=0.01, val_accuracy=0.712, val_loss=0.801, val_lr=0.01]  2%|▏         | 23/1000 [37:19<26:16:27, 96.81s/epoch, accuracy=0.711, loss=0.804, lr=0.01, val_accuracy=0.713, val_loss=0.8, val_lr=0.01]   2%|▏         | 24/1000 [38:56<26:15:12, 96.84s/epoch, accuracy=0.71, loss=0.804, lr=0.01, val_accuracy=0.711, val_loss=0.8, val_lr=0.01]   2%|▎         | 25/1000 [40:33<26:12:58, 96.80s/epoch, accuracy=0.71, loss=0.804, lr=0.01, val_accuracy=0.712, val_loss=0.798, val_lr=0.01]  3%|▎         | 26/1000 [42:10<26:11:39, 96.82s/epoch, accuracy=0.711, loss=0.803, lr=0.01, val_accuracy=0.708, val_loss=0.812, val_lr=0.01]  3%|▎         | 27/1000 [43:47<26:09:25, 96.78s/epoch, accuracy=0.71, loss=0.803, lr=0.01, val_accuracy=0.712, val_loss=0.802, val_lr=0.01]   3%|▎         | 28/1000 [45:23<26:07:55, 96.79s/epoch, accuracy=0.711, loss=0.803, lr=0.01, val_accuracy=0.71, val_loss=0.807, val_lr=0.01]  3%|▎         | 29/1000 [47:00<26:06:15, 96.78s/epoch, accuracy=0.71, loss=0.804, lr=0.01, val_accuracy=0.712, val_loss=0.802, val_lr=0.01]  3%|▎         | 30/1000 [48:37<26:02:36, 96.66s/epoch, accuracy=0.711, loss=0.803, lr=0.01, val_accuracy=0.711, val_loss=0.803, val_lr=0.01]  3%|▎         | 31/1000 [50:13<25:59:41, 96.58s/epoch, accuracy=0.714, loss=0.792, lr=0.001, val_accuracy=0.714, val_loss=0.792, val_lr=0.001]  3%|▎         | 32/1000 [51:49<25:57:55, 96.57s/epoch, accuracy=0.714, loss=0.791, lr=0.001, val_accuracy=0.714, val_loss=0.792, val_lr=0.001]  3%|▎         | 33/1000 [53:26<25:56:16, 96.56s/epoch, accuracy=0.714, loss=0.791, lr=0.001, val_accuracy=0.715, val_loss=0.792, val_lr=0.001]  3%|▎         | 34/1000 [55:03<25:54:44, 96.57s/epoch, accuracy=0.714, loss=0.791, lr=0.001, val_accuracy=0.714, val_loss=0.791, val_lr=0.001]  4%|▎         | 35/1000 [56:39<25:52:52, 96.55s/epoch, accuracy=0.714, loss=0.791, lr=0.001, val_accuracy=0.715, val_loss=0.791, val_lr=0.001]  4%|▎         | 36/1000 [58:15<25:50:17, 96.49s/epoch, accuracy=0.714, loss=0.791, lr=0.001, val_accuracy=0.714, val_loss=0.792, val_lr=0.001]  4%|▎         | 37/1000 [59:52<25:48:51, 96.50s/epoch, accuracy=0.714, loss=0.791, lr=0.001, val_accuracy=0.715, val_loss=0.792, val_lr=0.001]  4%|▍         | 38/1000 [1:01:29<25:47:46, 96.53s/epoch, accuracy=0.714, loss=0.791, lr=0.001, val_accuracy=0.714, val_loss=0.791, val_lr=0.001]  4%|▍         | 39/1000 [1:03:05<25:45:47, 96.51s/epoch, accuracy=0.714, loss=0.79, lr=0.001, val_accuracy=0.715, val_loss=0.792, val_lr=0.001]   4%|▍         | 40/1000 [1:04:42<25:43:53, 96.49s/epoch, accuracy=0.714, loss=0.79, lr=0.001, val_accuracy=0.713, val_loss=0.792, val_lr=0.001]  4%|▍         | 41/1000 [1:06:18<25:42:03, 96.48s/epoch, accuracy=0.714, loss=0.79, lr=0.001, val_accuracy=0.715, val_loss=0.791, val_lr=0.001]  4%|▍         | 42/1000 [1:07:54<25:40:01, 96.45s/epoch, accuracy=0.714, loss=0.79, lr=0.001, val_accuracy=0.715, val_loss=0.791, val_lr=0.001]  4%|▍         | 43/1000 [1:09:31<25:38:24, 96.45s/epoch, accuracy=0.714, loss=0.79, lr=0.001, val_accuracy=0.714, val_loss=0.791, val_lr=0.001]  4%|▍         | 44/1000 [1:11:07<25:37:18, 96.48s/epoch, accuracy=0.714, loss=0.79, lr=0.001, val_accuracy=0.715, val_loss=0.791, val_lr=0.001]  4%|▍         | 45/1000 [1:12:44<25:36:05, 96.51s/epoch, accuracy=0.715, loss=0.789, lr=0.0001, val_accuracy=0.715, val_loss=0.79, val_lr=0.0001]  5%|▍         | 46/1000 [1:14:20<25:34:22, 96.50s/epoch, accuracy=0.715, loss=0.788, lr=0.0001, val_accuracy=0.714, val_loss=0.79, val_lr=0.0001]  5%|▍         | 47/1000 [1:15:57<25:32:49, 96.51s/epoch, accuracy=0.715, loss=0.788, lr=0.0001, val_accuracy=0.715, val_loss=0.79, val_lr=0.0001]  5%|▍         | 48/1000 [1:17:33<25:30:41, 96.47s/epoch, accuracy=0.715, loss=0.788, lr=0.0001, val_accuracy=0.715, val_loss=0.79, val_lr=0.0001]  5%|▍         | 49/1000 [1:19:10<25:29:58, 96.53s/epoch, accuracy=0.715, loss=0.788, lr=0.0001, val_accuracy=0.715, val_loss=0.79, val_lr=0.0001]  5%|▌         | 50/1000 [1:20:47<25:28:27, 96.53s/epoch, accuracy=0.715, loss=0.788, lr=0.0001, val_accuracy=0.715, val_loss=0.79, val_lr=0.0001]  5%|▌         | 51/1000 [1:22:23<25:26:15, 96.50s/epoch, accuracy=0.715, loss=0.788, lr=0.0001, val_accuracy=0.715, val_loss=0.79, val_lr=0.0001]  5%|▌         | 52/1000 [1:24:00<25:24:56, 96.52s/epoch, accuracy=0.715, loss=0.788, lr=1e-5, val_accuracy=0.715, val_loss=0.79, val_lr=1e-5]      5%|▌         | 53/1000 [1:25:36<25:23:13, 96.51s/epoch, accuracy=0.715, loss=0.788, lr=1e-5, val_accuracy=0.715, val_loss=0.79, val_lr=1e-5]  5%|▌         | 54/1000 [1:27:13<25:21:35, 96.51s/epoch, accuracy=0.715, loss=0.788, lr=1e-5, val_accuracy=0.715, val_loss=0.79, val_lr=1e-5]  6%|▌         | 55/1000 [1:28:49<25:20:01, 96.51s/epoch, accuracy=0.715, loss=0.788, lr=1e-5, val_accuracy=0.715, val_loss=0.79, val_lr=1e-5]  6%|▌         | 56/1000 [1:30:26<25:18:43, 96.53s/epoch, accuracy=0.715, loss=0.788, lr=1e-5, val_accuracy=0.715, val_loss=0.79, val_lr=1e-5]  6%|▌         | 57/1000 [1:32:02<25:16:50, 96.51s/epoch, accuracy=0.715, loss=0.788, lr=1e-5, val_accuracy=0.715, val_loss=0.79, val_lr=1e-5]  6%|▌         | 58/1000 [1:33:39<25:16:09, 96.57s/epoch, accuracy=0.715, loss=0.788, lr=1e-5, val_accuracy=0.715, val_loss=0.79, val_lr=1e-5]  6%|▌         | 58/1000 [1:33:39<25:21:04, 96.88s/epoch, accuracy=0.715, loss=0.788, lr=1e-5, val_accuracy=0.715, val_loss=0.79, val_lr=1e-5]
