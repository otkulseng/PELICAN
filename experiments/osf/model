#!/usr/bin/env python
from nanopelican.layers import *
from nanopelican.scripts import run
from keras import layers, Model


def CreateModel(shape, conf):
    x = x_in = layers.Input(shape)
    x = InnerProduct(conf['inner_product'])(x)

    # Eq2v2 inner product: N x N x 1
    # creates N x N x 6,  -> N x N x n_ch

    x = Lineq2v2(symmetric=True, hollow=True, num_avg=conf['num_avg'], diag_bias=True)(x)
    x = layers.Dense(units=1)(x)


    # IP -> 2v2 -> dense(1, relu) -> 2v0 -> dense(1)
    # IP -> 2v0(hollow=true) -> dense(1, relu) 89.5%

    # IP -> 2v2 -> dense(2) -> 2v0 -> dense(1)
    # IP -> 2v2 -> dense(2) -> 2v0 -> dense(1)
    # IP -> 2v2 -> dense(2) -> 2v0 -> dense(1)
    # IP -> 2v2 -> dense(2) -> 2v0 -> dense(1)

    # IP -> 2v2(hollow=True, symmetric=True) -> dense(1, relu) ->  2v2 -> dense(1, relu) -> 2v0 -> dense(1)

    # IP -> 2v2 -> dense(10) -> 2v0 -> dense(5) (N / N_0)^alpha

    x = layers.Activation(activation=conf['activation'])(x)
    x = Lineq2v0(num_avg=conf['num_avg'])(x)
    x = layers.Dense(units=1)(x) # 13


    x = layers.Activation(conf['out_activation'])(x)
    return Model(inputs=x_in, outputs=x)

def main():
    run(CreateModel)

if __name__ == '__main__':
    main()

