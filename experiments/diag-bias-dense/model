#!/usr/bin/env python
from nanopelican.layers import *
from nanopelican.scripts import run
from keras import layers, Model


def mlp(units, activs, x):
    for unit, activ in zip(units, activs):

        x = layers.Dense(
            units=unit,
            activation=activ
        )(x)
    return x

def CreateModel(shape, conf):
    x = x_in = layers.Input(shape)

    x, mask = InnerProduct(conf['inner_product'])(x)


    x = DiagBiasDense(units=conf['input']['units'], activation=conf['input']['activs'])(x)
    x = layers.Multiply()([x, mask])

    x = Lineq2v2(
        symmetric=True,
        num_avg=conf['num_avg'],
    )(x)

    x = DiagBiasDense(units=conf['hidden']['units'], activation=conf['hidden']['activs'])(x)
    x = layers.Multiply()([x, mask])

    x = Lineq2v0(num_avg=conf['num_avg'])(x)

    x = mlp(conf['out']['units'], conf['out']['activs'], x)

    return Model(inputs=x_in, outputs=x)

def main():
    run(CreateModel)

if __name__ == '__main__':
    main()

